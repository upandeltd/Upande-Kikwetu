[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 1,
  "modified": "2025-04-15 10:59:54.636399",
  "module": "Upande Kikwetu",
  "name": "SO Week Automation",
  "script": "frappe.ui.form.on('Sales Order', {\n    delivery_date: function(frm) {\n        console.log('Delivery Date changed event triggered');\n        console.log('Current delivery date value:', frm.doc.delivery_date);\n        \n        if (frm.doc.delivery_date) {\n            // Convert the delivery date string to a Date object\n            let currentDate = frappe.datetime.str_to_obj(frm.doc.delivery_date);\n            console.log('Converted date object:', currentDate);\n            \n            // Calculate the week number\n            let startOfYear = new Date(currentDate.getFullYear(), 0, 1);\n            console.log('Start of year:', startOfYear);\n            \n            let days = Math.floor((currentDate - startOfYear) / (24 * 60 * 60 * 1000));\n            console.log('Days since start of year:', days);\n            \n            let weekNumber = Math.ceil((days + startOfYear.getDay() + 1) / 7);\n            console.log('Calculated week number:', weekNumber);\n            \n            // Set the week field value using the correct fieldname\n            frm.set_value('custom_week', weekNumber);\n            \n            // Refresh the field\n            frm.refresh_field('custom_week');\n        }\n    },\n    \n    refresh: function(frm) {\n        console.log('Form refreshed');\n        console.log('Current delivery date:', frm.doc.delivery_date);\n        console.log('Current week:', frm.doc.custom_week);\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 1,
  "modified": "2025-04-15 11:07:17.743563",
  "module": "Upande Kikwetu",
  "name": "Amount Calc Based on IGP",
  "script": "frappe.ui.form.on('Sales Order Item', {\n    custom_length(frm, cdt, cdn) {\n        let row = frappe.get_doc(cdt, cdn);\n        if (row.item_group && row.custom_length) {\n            frappe.call({\n                method: 'get_item_group_price',\n                args: {\n                    item_group: row.item_group,\n                    length: row.custom_length,\n                    currency: frm.doc.currency\n                },\n                callback: function(r) {\n                    if (r.message) {\n                        frappe.model.set_value(cdt, cdn, 'rate', r.message);\n                        frappe.model.set_value(cdt, cdn, 'stock_uom_rate', r.message);\n                        // frappe.model.set_value(cdt, cdn, 'amount', r.message * row.stock_qty);\n                    } else {\n                        frappe.model.set_value(cdt, cdn, 'rate', 0);\n                        frappe.model.set_value(cdt, cdn, 'stock_uom_rate', 0);\n                        frappe.model.set_value(cdt, cdn, 'amount', 0);\n                        frappe.msgprint(`No price found for this customer's currency or the selected item. Please set a price to proceed!`);\n                    }\n                }\n            });\n        }\n    }\n    \n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 1,
  "modified": "2025-04-15 11:18:54.608779",
  "module": "Upande Kikwetu",
  "name": "Calculation Of Total Stems",
  "script": "frappe.ui.form.on('Sales Order', {\n    refresh: function(frm) {\n        calculate_total_stock_qty(frm);\n    },\n    items_add: function(frm) {\n        calculate_total_stock_qty(frm);\n    },\n    items_remove: function(frm) {\n        calculate_total_stock_qty(frm);\n    },\n    validate: function(frm) {\n        calculate_total_stock_qty(frm);\n    }\n});\n\nfunction calculate_total_stock_qty(frm) {\n    let total = 0;\n    frm.doc.items.forEach(item => {\n        total += item.stock_qty;\n    });\n    frm.set_value('custom_total_stock_qty', total);\n    frm.refresh_field('custom_total_stock_qty');\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 1,
  "modified": "2025-04-15 12:22:36.770006",
  "module": "Upande Kikwetu",
  "name": "Sales Order connection with FPL and OPL",
  "script": "frappe.ui.form.on('Sales Order', {\n    before_cancel: function(frm) {\n        \n        frappe.call({\n            method: \"frappe.client.get_list\",\n            args: {\n                doctype: \"Order Pick List\",\n                filters: {\n                    \"sales_order\": frm.doc.name,\n                    \"docstatus\": 1 \n                },\n                fields: [\"name\"]\n            },\n            callback: function(r) {\n                if (r.message && r.message.length > 0) {\n                    frappe.validated = false;\n                    frappe.throw(__(`Cannot cancel this Sales Order. \n                        Please cancel the linked Order Pick List(s) first: \n                        ${r.message.map(d => d.name).join(', ')}`));\n                } else {\n                    \n                    checkFarmPackList(frm);\n                }\n            }\n        });\n    }\n});\n\nfunction checkFarmPackList(frm) {\n    frappe.call({\n        method: \"frappe.client.get_list\",\n        args: {\n            doctype: \"Farm Pack List\",\n            filters: {\n                \"custom_sales_order\": frm.doc.name,\n                \"docstatus\": 1\n            },\n            fields: [\"name\"]\n        },\n        callback: function(r) {\n            if (r.message && r.message.length > 0) {\n                frappe.validated = false;\n                frappe.throw(__(`Cannot cancel this Sales Order. \n                    Please cancel the linked Farm Pack List(s) first: \n                    ${r.message.map(d => d.name).join(', ')}`));\n            }\n            \n        }\n    });\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 1,
  "modified": "2025-04-15 12:25:45.066690",
  "module": "Upande Tambuzi",
  "name": "Sales Tracker Button",
  "script": "frappe.ui.form.on('Sales Order', {\n    refresh: function(frm) {\n        // Create the Sales Tracker dropdown\n        frm.add_custom_button(__('Sales Tracker'), function() {\n            // Placeholder function - actual functionality handled by dropdown\n        }, __(\"\"));\n        \n        // Get the button we just created\n        let sales_tracker_btn = frm.page.inner_toolbar.find('button:contains(\"Sales Tracker\")');\n        \n        // Remove default click handlers\n        sales_tracker_btn.off('click');\n        \n        // Make it blue\n        sales_tracker_btn.removeClass('btn-default').addClass('btn-info');\n        \n        // Convert to a dropdown trigger\n        sales_tracker_btn.attr({\n            'data-toggle': 'dropdown',\n            'aria-haspopup': 'true',\n            'aria-expanded': 'false'\n        }).addClass('dropdown-toggle');\n        \n        // Create dropdown menu\n        let dropdown_html = `\n            <div class=\"dropdown-menu\" aria-labelledby=\"salesTrackerDropdown\">\n                <a class=\"dropdown-item\" href=\"#\" data-action=\"order_pick_list\">Order Pick List</a>\n                <a class=\"dropdown-item\" href=\"#\" data-action=\"farm_pack_list\">Farm Pack List</a>\n            </div>\n        `;\n        \n        // Append the dropdown menu after the button\n        sales_tracker_btn.after(dropdown_html);\n        \n        // Make the button's parent a dropdown container\n        sales_tracker_btn.parent().addClass('dropdown');\n        \n        // Handle dropdown item clicks\n        frm.page.inner_toolbar.find('.dropdown-item').click(function(e) {\n            e.preventDefault();\n            let action = $(this).data(\"action\");\n            if (action === \"order_pick_list\") {\n                frappe.route_options = { sales_order: frm.doc.name };\n                frappe.set_route(\"List\", \"Order Pick List\");\n            } \n            else if (action === \"farm_pack_list\") {\n                frappe.route_options = { custom_sales_order: frm.doc.name };\n                frappe.set_route(\"List\", \"Farm Pack List\");\n            }\n        });\n        \n        // Initialize Bootstrap dropdown\n        sales_tracker_btn.dropdown();\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Scan",
  "enabled": 1,
  "modified": "2025-04-25 01:05:25.241505",
  "module": "Upande Kikwetu",
  "name": "Scan QR IN SCAN",
  "script": "// enables one to scan in erpnext during receiving,grading and packing\n\nfrappe.ui.form.on('Scan', {\n    refresh(frm) {\n        console.log(\"Scan form refreshed, adding Scan QR Code button.\");\n        // Add custom button for QR code scanning\n        frm.add_custom_button(\"Scan QR Code\", () => {\n            console.log(\"Scan QR Code button clicked.\");\n            checkAndStartScanner(frm);\n        });\n    },\n\n    farm(frm) {\n        console.log(\"Farm field changed:\", frm.doc.farm);\n        if (frm.doc.farm && frm.doc.action) {\n            checkAndStartScanner(frm);\n        }\n    },\n\n    action(frm) {\n        console.log(\"Action field changed:\", frm.doc.action);\n        if (frm.doc.farm && frm.doc.action) {\n            checkAndStartScanner(frm);\n        }\n    },\n\n    grader(frm) {\n        console.log(\"Grader field changed:\", frm.doc.grader);\n        if (frm.doc.farm && frm.doc.action && frm.doc.grader) {\n            checkAndStartScanner(frm);\n        }\n    },\n\n    opl_data(frm) {\n        console.log(\"OPL Data field changed:\", frm.doc.opl_data);\n        if (frm.doc.farm && frm.doc.action && frm.doc.opl_data) {\n            checkAndStartScanner(frm);\n        }\n    }\n});\n\n// Debounce utility to prevent multiple rapid calls\nconst debounce = (func, wait) => {\n    let timeout;\n    return (...args) => {\n        clearTimeout(timeout);\n        timeout = setTimeout(() => func.apply(null, args), wait);\n    };\n};\n\n// Debounced checkAndStartScanner to prevent rapid successive calls\nconst checkAndStartScanner = debounce((frm) => {\n    console.log(\"Checking scanner prerequisites...\");\n    const { farm, action, opl_data } = frm.doc;\n\n    if (!farm || !action) {\n        console.log(\"Farm or Action missing.\");\n        frappe.msgprint({\n            message: \"Please select both Farm and Action before scanning.\",\n            indicator: 'red'\n        });\n        return;\n    }\n\n    // For Packing: Require OPL to be scanned first\n    if (action === \"Packing\" && !opl_data) {\n        console.log(\"Packing action, OPL not set.\");\n        frappe.msgprint({\n            message: \"Please scan the Order Pick List first.\",\n            indicator: 'red'\n        });\n        return;\n    }\n\n    // Proceed to load QR scanner library (allow Grading even without grader for initial scan)\n    console.log(\"Prerequisites met, loading QR scanner library.\");\n    loadQrScannerLibrary(frm);\n}, 500);\n\nconst loadQrScannerLibrary = (frm, retryCount = 0, maxRetries = 1) => {\n    console.log(\"Loading Html5Qrcode library...\");\n    if (!window.Html5Qrcode) {\n        const primaryUrl = \"https://unpkg.com/html5-qrcode@2.3.8/html5-qrcode.min.js\";\n        const fallbackUrl = \"https://cdn.jsdelivr.net/npm/html5-qrcode@2.3.8/html5-qrcode.min.js\";\n        const url = retryCount === 0 ? primaryUrl : fallbackUrl;\n\n        console.log(`Attempt ${retryCount + 1}/${maxRetries + 1}: Loading library from ${url}`);\n        const script = document.createElement(\"script\");\n        script.src = url;\n        script.onload = () => {\n            console.log(\"Html5Qrcode library version 2.3.8 loaded successfully from\", url);\n            showQrScannerDialog(frm);\n        };\n        script.onerror = () => {\n            console.error(\"Failed to load Html5Qrcode library from\", url);\n            if (retryCount < maxRetries) {\n                console.log(`Retrying... (${retryCount + 1}/${maxRetries})`);\n                loadQrScannerLibrary(frm, retryCount + 1, maxRetries);\n            } else {\n                frappe.msgprint({\n                    message: \"Failed to load QR scanning library after multiple attempts. Please contact your system administrator.\",\n                    indicator: 'red'\n                });\n            }\n        };\n        document.head.appendChild(script);\n    } else {\n        console.log(\"Html5Qrcode library already loaded.\");\n        showQrScannerDialog(frm);\n    }\n};\n\nconst showQrScannerDialog = (frm) => {\n    console.log(\"Showing QR scanner dialog...\");\n    const dialog = new frappe.ui.Dialog({\n        title: \"Scan QR Code\",\n        fields: [\n            { fieldname: 'qr_scanner', fieldtype: 'HTML', options: '' }\n        ]\n    });\n\n    const $wrapper = dialog.fields_dict.qr_scanner.$wrapper;\n    $wrapper.html('<div id=\"qr-reader\" style=\"width: 100%;\"></div>');\n\n    dialog.show();\n    console.log(\"QR scanner dialog displayed.\");\n\n    setTimeout(() => {\n        const qrReaderElement = document.getElementById(\"qr-reader\");\n        if (qrReaderElement) {\n            console.log(\"QR reader element found, initializing scanner.\");\n            initializeQrScanner(qrReaderElement, dialog, frm);\n        } else {\n            console.error(\"QR reader element not found!\");\n            frappe.msgprint({\n                message: \"Error initializing QR scanner. Please try again.\",\n                indicator: 'red'\n            });\n            dialog.hide();\n        }\n    }, 300);\n};\n\nconst initializeQrScanner = (qrReaderElement, dialog, frm) => {\n    console.log(\"Initializing QR scanner...\");\n    const html5QrCode = new Html5Qrcode(\"qr-reader\");\n    let isProcessing = false;\n\n    // Check available cameras\n    Html5Qrcode.getCameras().then(cameras => {\n        if (cameras && cameras.length > 0) {\n            console.log(\"Cameras found:\", cameras);\n\n            // Enhanced logic to select the back camera\n            let backCamera = cameras.find(cam => \n                cam.facingMode === \"environment\" || \n                (cam.label && /back|rear/i.test(cam.label))\n            );\n\n            // If no back camera is found, try to avoid front camera by selecting the last camera\n            if (!backCamera) {\n                console.log(\"No environment-facing camera found, checking for non-front camera...\");\n                backCamera = cameras.find(cam => \n                    !(cam.label && /front|selfie/i.test(cam.label))\n                ) || cameras[cameras.length - 1]; // Fallback to the last camera if no non-front camera is found\n            }\n\n            const cameraId = backCamera ? backCamera.id : cameras[0].id;\n            console.log(\"Selected camera ID:\", cameraId, \"Details:\", backCamera || cameras[0]);\n\n            startScanner(html5QrCode, qrReaderElement, cameraId, dialog, frm);\n        } else {\n            console.error(\"No cameras found.\");\n            frappe.msgprint({\n                message: \"No cameras detected on this device. Please ensure a camera is available and try again.\",\n                indicator: 'red'\n            });\n            dialog.hide();\n        }\n    }).catch(err => {\n        console.error(\"Error accessing cameras:\", err);\n        frappe.msgprint({\n            message: \"Unable to access the camera. Please ensure permissions are granted and try again.\",\n            indicator: 'red'\n        });\n        dialog.hide();\n    });\n\n    function startScanner(html5QrCode, qrReaderElement, cameraId, dialog, frm) {\n        html5QrCode.start(\n            cameraId,\n            {\n                fps: 15,\n                qrbox: { width: 250, height: 250 }\n            },\n            async (decodedText, decodedResult) => {\n                if (isProcessing) {\n                    console.log(\"Scan in progress, ignoring duplicate scan.\");\n                    return;\n                }\n                isProcessing = true;\n                console.log(\"QR code scanned:\", decodedText);\n\n                try {\n                    const { action, grader, opl_data } = frm.doc;\n\n                    if (action === \"Grading\") {\n                        console.log(\"Processing Grading scan...\");\n                        if (!grader) {\n                            let data;\n                            try {\n                                data = JSON.parse(decodedText);\n                                console.log(\"Parsed grader data:\", data);\n                            } catch (e) {\n                                console.error(\"Invalid JSON for grader label:\", e);\n                                frappe.msgprint({\n                                    message: \"Invalid Grader label. Please scan a valid Grader label.\",\n                                    indicator: 'red'\n                                });\n                                isProcessing = false;\n                                return;\n                            }\n\n                            if (!data.grader) {\n                                console.log(\"No grader key in scanned data.\");\n                                frappe.msgprint({\n                                    message: \"Invalid Grader label. Please scan a valid Grader label.\",\n                                    indicator: 'red'\n                                });\n                                isProcessing = false;\n                                return;\n                            }\n\n                            console.log(\"Setting grader field:\", data.grader);\n                            await frm.set_value('grader', data.grader);\n                            frappe.msgprint({\n                                message: \"Grader Label scanned. Now scan bunch labels.\",\n                                indicator: 'green',\n                                print_duration: 5000\n                            });\n                            frm.reload_doc(); // Reload document without saving\n                        } else {\n                            console.log(\"Grader set, setting scan_data for bunch label.\");\n                            await frm.set_value('scan_data', decodedText);\n                            frappe.msgprint({\n                                message: \"Bunch Label scanned successfully.\",\n                                indicator: 'green',\n                                print_duration: 5000\n                            });\n                            frm.reload_doc(); // Reload document without saving\n                        }\n                    } else if (action === \"Packing\") {\n                        console.log(\"Processing Packing scan...\");\n                        if (!opl_data) {\n                            if (!decodedText.includes('order-pick-list')) {\n                                console.log(\"Scanned data is not an OPL URL.\");\n                                frappe.msgprint({\n                                    message: \"Please scan a valid Order Pick List.\",\n                                    indicator: 'red'\n                                });\n                                isProcessing = false;\n                                return;\n                            }\n\n                            console.log(\"Processing OPL scan:\", decodedText);\n                            const oplId = decodedText.split('/').pop();\n                            let oplDoc;\n                            try {\n                                oplDoc = await frappe.db.get_doc(\"Order Pick List\", oplId);\n                                console.log(\"Fetched OPL document:\", oplDoc);\n                            } catch (e) {\n                                console.error(\"Error fetching OPL:\", e);\n                                frappe.msgprint({\n                                    message: \"Invalid or inaccessible Order Pick List.\",\n                                    indicator: 'red'\n                                });\n                                isProcessing = false;\n                                return;\n                            }\n\n                            if (oplDoc.status == 0) {\n                                console.log(\"OPL is cancelled.\");\n                                frappe.msgprint({\n                                    message: \"This Order Pick List is cancelled. Request the updated Order Pick List.\",\n                                    indicator: 'red'\n                                });\n                                isProcessing = false;\n                                return;\n                            }\n\n                            console.log(\"Setting opl_data and order_pick_list fields.\");\n                            await frm.set_value('opl_data', decodedText);\n                            await frm.set_value('order_pick_list', oplId);\n                            frappe.msgprint({\n                                message: \"Order Pick List scanned. Now scan bunch labels.\",\n                                indicator: 'green',\n                                print_duration: 5000\n                            });\n                            frm.reload_doc(); // Reload document without saving\n                        } else {\n                            console.log(\"OPL set, setting scan_data for bunch label.\");\n                            await frm.set_value('scan_data', decodedText);\n                            frappe.msgprint({\n                                message: \"Bunch Label scanned successfully.\",\n                                indicator: 'green',\n                                print_duration: 5000\n                            });\n                            frm.reload_doc(); // Reload document without saving\n                        }\n                    } else {\n                        console.log(\"Processing scan for other action (e.g., Receiving).\");\n                        await frm.set_value('scan_data', decodedText);\n                        frappe.msgprint({\n                            message: \"QR Code scanned successfully.\",\n                            indicator: 'green',\n                            print_duration: 5000\n                        });\n                        frm.reload_doc(); // Reload document without saving\n                    }\n\n                    console.log(\"Stopping QR scanner and closing dialog.\");\n                    await html5QrCode.stop();\n                    dialog.hide();\n                } catch (error) {\n                    console.error(\"Error processing QR Code:\", error);\n                    frappe.msgprint({\n                        message: \"Error processing QR Code. Please try again.\",\n                        indicator: 'red'\n                    });\n                } finally {\n                    isProcessing = false;\n                }\n            },\n            (errorMessage) => {\n                console.warn(\"Scanning error:\", errorMessage);\n            }\n        ).catch((err) => {\n            console.error(\"Error starting QR scanner:\", err);\n            frappe.msgprint({\n                message: \"Unable to start the QR scanner. Please ensure camera permissions are granted and try again.\",\n                indicator: 'red'\n            });\n            dialog.hide();\n        });\n\n        // Stop scanner when dialog is closed\n        dialog.$wrapper.on(\"hide\", () => {\n            console.log(\"QR scanner dialog hidden, stopping scanner.\");\n            html5QrCode.stop().then(() => {\n                console.log(\"QR Scanner stopped.\");\n            }).catch((err) => {\n                console.error(\"Error stopping QR scanner:\", err);\n            });\n        });\n    }\n};",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Scan",
  "enabled": 1,
  "modified": "2025-04-24 23:51:49.403751",
  "module": "Upande Kikwetu",
  "name": "Scan via honeywell v2",
  "script": "frappe.ui.form.on('Scan', {\n\trefresh(frm) {\n\t    toggle_scan_data_field(frm);\n\t},\n\t\n\tfarm(frm) {\n\t    toggle_scan_data_field(frm);\n\t},\n\t\n\taction(frm) {\n\t    toggle_scan_data_field(frm);\n\t},\n\t\n\t\n\t\n\tasync scan_data(frm) {\n\t    let audio = new Audio('/assets/upande_kikwetu/sounds/store-scanner-beep-90395.mp3');\n\n\t    let scan_value = frm.doc.scan_data;\n\t    let farm = frm.doc.farm;\n        let action = frm.doc.action;\n        let boxStickerDocId = frm.doc.box_sticker || null;\n\n\n\t    if (scan_value && !frm.is_processing_stock_entry) {\n\t        frm.is_processing_stock_entry = true;\n\t        frm.set_df_property('scan_data', 'read_only', 1);\n\n\t        if (action === 'Packing') {\n\t            if (!frm.doc.opl_data) {\n\t               // Check if scan_value is the opl url\n\t               if (scan_value.includes('order-pick-list')) {\n\t                   \n\t                    frm.set_value('opl_data', scan_value);\n    \t                const oplId = scan_value.split('/').pop();\n    \t                \n    \t               // Check if opl is cancelled before setting value. \n    \t               // If cancelled throw error \"This OPL is cancelled, Request the updated OPL\"\n                        const oplDoc = await frappe.db.get_doc(\"Order Pick List\", oplId);\n\t                   \n\t                   if (oplDoc.status == 0) {\n    \t                    frappe.throw(\"This Order Pick List is cancelled. Request the updated Order Pick List\")\n    \t                }\n    \t               \n    \t                frm.set_value('order_pick_list', oplId);\n                        audio.play();\n    \t                frappe.msgprint('Order Pick List scanned. Now scan bunch labels.');\n\t               } else {\n\t                    frm.set_df_property('scan_data', 'read_only', 0);\n\t                    frm.set_value('scan_data', '');\n\t                    frappe.throw(\"Please Scan a valid Order Pick List\");\n\t               }\n\t                \n\t                \n\t                frm.set_df_property('scan_data', 'read_only', 0);\n\t                frm.set_value('scan_data', '');\n\n\n\t                frm.is_processing_stock_entry = false;\n\t                \n\t                setTimeout(() => {\n                        frm.save();\n                    }, 50);\n\n                    \n\t            } else {\n\n\t                let bunchLabelData = scan_value;\n\t                try {\n                        await process_bunch_scan(frm.doc.opl_data, bunchLabelData, farm, action, frm, audio);\n                        // frappe.msgprint('Bunch scanned. Scan next bunch or Close Box');\n                        frm.set_df_property('scan_data', 'read_only', 0);\n                        frm.set_value('scan_data', '');\n                    } catch (error) {\n                        if (error.message.toLowerCase.includes(\"this bunch has not been graded on the system\")) {\n                            console.log(error.message);\n                        } else {\n                            frappe.msgprint(`Error processing bunch scan: ${error.message}`);\n                        }\n                        \n                    }\n\t                \n                    frm.set_df_property('scan_data', 'read_only', 0);\n\t                frm.set_value('scan_data', '');\n\t                frm.is_processing_stock_entry = false;\n\t            }\n\t           \n\t            \n\t        } else if (action === 'Grading') {\n\t            // Start with fetching the grader's name.\n\t            //If it is not a grader label and it's the first scan(grader field is not populated), throw error telling user to scan grader label first.\n\t            const data = JSON.parse(scan_value);\n\t            const bunchLabelData = data;\n\t            \n\t            if (!frm.doc.grader) {\n\t               if (!data.grader ) {\n    \t               frappe.throw(\"Please scan the Grader label first!\");\n    \t           }\n    \t           \n    \t            //Store the grader in the grader field\n\t                frm.set_value('grader', data.grader);\n\t                audio.play();\n\t                frappe.msgprint('Grader Label scanned. Now scan bunch labels.');\n                    frm.set_df_property('scan_data', 'read_only', 0);\n                    frm.set_value('scan_data', '');\n    \n    \n                    frm.is_processing_stock_entry = false;\n                    \n                    setTimeout(() => {\n                        frm.save();\n                    }, 250);\n                    \n    \t           \n\t            } else {\n\t                \n\t                \n                    try {\n                        await process_grading_bunch_scan(bunchLabelData, farm, action, frm, audio);\n                        frappe.msgprint(`Bunch scanned successfully. Scan next bunch belonging to ${frm.doc.graders_name}!`);\n                        frm.set_df_property('scan_data', 'read_only', 0);\n                        frm.set_value('scan_data', '');\n                    } catch (error) {\n                        \n                        if (error.message.includes('Bunch has already been scanned.')) {\n                            console.log('Bunch already scanned');\n                        } else {\n                            frappe.msgprint(`Error processing bunch scan: ${error.message}`);\n                        }\n                        \n                        \n                        \n                    }\n\t                \n                    frm.set_df_property('scan_data', 'read_only', 0);\n\t                frm.set_value('scan_data', '');\n\t                frm.is_processing_stock_entry = false;\n\t                \n\t                setTimeout(() => {\n                        frm.save();\n                    }, 250);\n\t            }\n\t           \n\t           \n\t            \n\t        } else if (action === 'Receiving') {\n                trigger_stock_entry(scan_value, farm, action, audio).finally(() => {\n                    frm.set_df_property('scan_data', 'read_only', 0);\n                    frm.set_value('scan_data', '');\n                    frm.is_processing_stock_entry = false;\n                    setTimeout(() => {\n                        frm.save();\n                    }, 250);\n                });\n            } else if (action === 'Receiving Quarantined') {\n                await trigger_stock_entry(scan_value, farm, action).finally(() => {\n                    frm.set_df_property('scan_data', 'read_only', 0);\n                    frm.set_value('scan_data', '');\n                    frm.is_processing_stock_entry = false;\n                });\n                \n            } else if (action === 'Grading Check') {\n                // let stockEntryName;\n                // let scan_check_doc;\n\n                // if (!frm.doc.checking_label) {\n                //     scan_check_doc = frappe.model.get_new_doc('Scan Check');\n                    \n                //     frm.doc.scan_check_id = scan_check_doc.name;\n                    \n                //     frappe.msgprint(`Created Scan Check: ${scan_check_doc.name}`);\n                    \n                //     frm.doc.checking_label = 1;\n                //     await frm.save();\n                    \n                // }\n                \n                // scan_check_doc = await frappe.db.get_doc('Scan Check', frm.doc.scan_check_id)\n                \n                let variety, qty, grower, uom, harvester, greenhouse, block__bed_number, stockEntryDoc, items,\n                    stem_length, graded_by, bunched_by;\n                    \n                if ( scan_value.includes(\"farm\") && scan_value.includes(\"variety\") ) {\n                    \n                    const bunchData = JSON.parse(scan_value);\n    \n                    const existingEntries = await frappe.db.get_list('Stock Entry', {\n                        fields: ['name', 'custom_bunch_id'],\n                        filters: {\n                            custom_bunch_id: bunchData.bunch_id\n                        },\n                        limit: 1\n                    });\n                    \n                    if (existingEntries.length === 0) {\n                        frappe.msgprint(\"Bunch Status: NOT GRADED\");\n                    } else {\n                        audio.play();\n                        frappe.msgprint(\"Bunch Status: GRADED\");\n                    }\n                \n                // This is grading qr code data\n                // if ( scan_value.includes(\"farm\") && scan_value.includes(\"variety\") ) {\n                    \n                //     const bunchData = JSON.parse(scan_value);\n    \n                //     const existingEntries = await frappe.db.get_list('Stock Entry', {\n                //         fields: ['name', 'custom_bunch_id'],\n                //         filters: {\n                //             custom_bunch_id: bunchData.bunch_id\n                //         },\n                //         limit: 1\n                //     });\n                    \n                //     let check = {};\n                    \n                //     if (existingEntries.length === 0) {\n                //         frappe.msgprint(\"Bunch Status: NOT GRADED\");\n                        \n                        \n                        \n                        // const checked_row = scan_check_doc.checked_items.find((row) => {\n                        //     row.action === \"Grading Check\" &&\n                        //     row.status === \"NOT GRADED\"\n                        // })\n                        \n                        // if (checked_row) {\n                        //     check = {\n                        //         qty: checked_row.qty + 1\n                        //     }\n                        // } else {\n                        //     check = {\n                        //         action: action,\n                        //         status: \"NOT GRADED\",\n                        //         qty: 1\n                        //     }\n                            \n                        // }\n                        \n                        // scan_check_doc.add_child('checked_items', check)\n                        \n                        \n                    // } else {\n                    //     frappe.msgprint(\"Bunch Status: GRADED\");\n                        \n                        // const checked_row = scan_check_doc.checked_items.find((row) => {\n                        //     row.action === \"Grading Check\" &&\n                        //     row.status === \"GRADED\"\n                        // })\n                        \n                        // if (checked_row) {\n                        //     check = {\n                        //         qty: checked_row.qty + 1\n                        //     }\n                        // } else {\n                        //     check = {\n                        //         action: action,\n                        //         status: \"GRADED\",\n                        //         qty: 1\n                        //     }\n                            \n                        // }\n                        \n                        // scan_check_doc.add_child('checked_items', check)\n                    // }\n                    \n                    \n                // This is harvesting qr code data\n                } else if (scan_value.startsWith('BUCKET')) {\n                    \n                    // frappe.msgprint(`Harvester: ${harvester}, Greenhouse: ${greenhouse}, Bay: ${block__bed_number}, Variety: ${variety}, No. of Stems: ${qty} `);\n                }\n                \n                \n            \n                frm.set_df_property('scan_data', 'read_only', 0);\n                frm.set_value('scan_data', '');\n                frm.is_processing_stock_entry = false;\n                \n                \n                \n                setTimeout(() => {\n                    frm.save();\n                }, 1000);\n                \n            } \n\t    }\n\t}\n\t\n});\n\nasync function process_grading_bunch_scan(bunchLabelData, farm, action, frm, audio) {\n    \n    try {\n        // Get the stock entry with the bunch Id\n        // Check if bunch is scanned via the custom_scanned_grading field\n        const existingEntry = await frappe.db.get_list('Stock Entry', {\n            fields: ['name', 'custom_scanned_grading'],\n            filters: {\n                custom_bunch_id: bunchLabelData.bunch_id\n            },\n            limit: 1\n        });\n        \n       \n        // Check if bunch is already scanned\n        if (existingEntry.length > 0 && existingEntry[0].custom_scanned_grading === 1) {\n            frappe.throw('Bunch has already been scanned.');\n            return;\n        }\n        \n        // Create a new stock entry\n        const stockEntry = frappe.model.get_new_doc('Stock Entry');\n\n        stockEntry.stock_entry_type = 'Grading';\n        \n        stockEntry.from_warehouse = `${farm} Receiving Cold Store  - KF`;\n        \n        // Temporary for a week\n        stockEntry.to_warehouse = `${farm} Dispatch Coldstore  - KF`;\n        stockEntry.custom_farm = farm;\n        stockEntry.custom_graded_by = frm.doc.grader;\n        stockEntry.custom_stem_length = bunchLabelData.stem_length;\n        stockEntry.custom_bunched_by = bunchLabelData.bunch_size;\n        stockEntry.custom_bunch_id = bunchLabelData.bunch_id;\n        stockEntry.custom_scanned_grading = 1;\n\n        stockEntry.items = [{\n            item_code: bunchLabelData.variety,\n            uom: bunchLabelData.bunch_size,\n            qty: 1\n        }];\n\n        await frappe.db.insert(stockEntry);\n        audio.play();\n        frappe.msgprint('Stock transfered successfully.');\n    } catch (error) {\n\n        frappe.throw(__('Error creating Stock Entry: ') + error.message);\n        \n        \n    }\n    \n}\n\nlet farmPackListDocId = null;\n\n\n\nfunction getNameFromUrl(url) {\n    const urlArray = url.split(\"/\");\n    const arrayLength = urlArray.length;\n    const name = urlArray[arrayLength - 1];\n    \n    return name;\n}\n\n\n\nasync function trigger_stock_entry(scan_value, farm, action, audio) {\n    await createStockEntry(scan_value, farm, action, audio);\n    if (action === 'Receiving') {\n        frappe.msgprint(`Received Bucket and Created Stock Entry successfully`);\n        frappe.msgprint(``)\n    } else if (action === 'Receiving Quarantined') {\n        frappe.msgprint(`Received and moved Bucket to quarantine`);\n    }\n    \n}\n\n\n\nasync function process_bunch_scan(opl_url, bunchLabelData, farm, action, frm, audio) {\n        \n    const oplName = getNameFromUrl(opl_url);\n    \n    const bunchData = JSON.parse(bunchLabelData)\n    \n    const existingEntries = await frappe.db.get_list('Stock Entry', {\n        fields: ['name', 'custom_bunch_id'],\n        filters: {\n            custom_bunch_id: bunchData.bunch_id\n        },\n        limit: 1\n    });\n\n    // If no matching stock entry is found\n    if (existingEntries.length === 0) {\n        frappe.throw(`This bunch has not been graded in the system. Perform the grading scan on it to enable packing: ${bunchData.bunch_id}`);\n    }\n    const bunchStockEntryName = existingEntries[0].name;\n    const stockEntryUrl = `/app/stock-entry/${bunchStockEntryName}`;\n    let bunchName;\n    let previouslyScannedItems;\n    let previously_scanned_items_list\n    \n    let totalBunches = 0;\n    let scannedBunches = 0;\n    \n    let stockEntryDoc;\n    \n    \n    // try {\n    //     stockEntryDoc = await frappe.db.get_doc('Stock Entry', bunchStockEntryName);\n    // } catch (error) {\n    //     frappe.throw(`Failed to fetch Stock Entry: ${error}`);\n    // }\n    \n    // if (stockEntryDoc.custom_scanned ) {\n    //     frappe.throw(\"Bunch aready scanned!\");\n    //     return;\n    // }\n    \n    // frappe.call({\n    //     method: \"upande_kikwetu.server_scripts.update_custom_scanned.update_custom_scanned\",\n    //     args: { stock_entry_name: stockEntryName }\n    // });\n    \n    // returns an object with total items and scanned items\n    let varietyMatch = {};\n    \n    \n    try {\n        varietyMatch = await validateLabels(oplName, bunchLabelData, previouslyScannedItems, frm);\n        bunchName = bunchData.variety;\n        \n        if (!varietyMatch.valid) {\n            frappe.throw(`${bunchName} does not match the Order Pick List!`);\n        }\n    } catch (error) {\n        frappe.throw(`Error validating labels: ${error}`);\n        return;\n    }\n    \n    const box_id = varietyMatch.box_number;\n\n    \n    // try {\n    //     await createStockEntry(bunchStockEntryName, farm, action, audio);\n        \n    //     frappe.msgprint(`Transfered stock successfully`);\n    // } catch (error) {\n    //     frappe.throw(`Error creating stock entry: ${error}`);\n    // }\n    \n\n    // Add bunch detail to scanned_items child table\n    const newBunchDetails = {\n        variety: bunchData.variety,\n        bunch_size: bunchData.bunch_size,\n        number_of_bunches: 1,\n    };\n    \n\n    // previously_scanned_items_list is the items scanned for this current box so get it from fpl according to the box id\n    \n    // const scannedItems = previously_scanned_items_list.reduce((sum, row) => {\n    //     return sum + (row.qty || 0)\n    // }, 1)\n    \n    totalBunches = frm.doc.total_bunches;\n    totalScanned = varietyMatch.scannedItems + 1;\n    \n    frm.set_value('scanned_bunches', totalScanned);\n    frappe.msgprint(`${totalScanned} of ${totalBunches} scanned`)\n    \n    // if (!boxStickerDocId) {\n    //     await createBoxSticker(oplName, bunchStockEntryName, frm);\n    // } else {\n\n    //     await addVarietyToBoxSticker(boxStickerDocId, bunchStockEntryName);\n    // }\n    \n    \n    await createOrGetFarmPackList(oplName, bunchStockEntryName, box_id);\n    audio.play();\n    frm.save();\n    \n}\n\n\nasync function createOrGetFarmPackList(oplName, bunchStockEntryName, box_id) {\n\n    const { sales_order, farm } = await getSalesOrderAndFarmFromOPL(oplName);\n    \n    if (!sales_order || farm == \"Unknown\" ) {\n        frappe.throw(\"Sales Order or Warehouse details missing in Order Pick List.\");\n        return;\n    }\n    \n    const existingFPL = await frappe.db.get_list(\"Farm Pack List\", {\n        filters: {\n            custom_sales_order: sales_order,\n            custom_farm: farm\n        },\n        fields: [\"name\", \"docstatus\"]\n        \n    });\n    \n    const isSubmitted = existingFPL.some(fpl => fpl.docstatus === 1);\n    \n    if (isSubmitted) {\n        frappe.throw(\"Farm Pack List already submitted. Check your Order Pick List and scan again\")\n    }\n    \n    if (existingFPL.length > 0) {\n        farmPackListDocId = existingFPL[0].name;\n        await addBunchToFarmPackList(farmPackListDocId, bunchStockEntryName, oplName, farm, box_id);\n        // frappe.msgprint(`Bunch added to existing Farm Pack List: ${farmPackListDocId}`);\n    } else {\n        await createFarmPackListEntry(bunchStockEntryName, oplName, farm, box_id);\n    }\n}\n\n\n\nasync function createFarmPackListEntry(bunchStockEntryName, oplName, farm, box_id) {\n    try {\n        const orderId = oplName;\n        const stockEntryId = bunchStockEntryName;\n        \n        // Fetch Sales Order & Stock Entry\n        const orderPick = await frappe.db.get_doc(\"Order Pick List\", orderId);\n        \n        const stockEntry = await frappe.db.get_doc(\"Stock Entry\", stockEntryId);\n    \n        if (!orderPick || !stockEntry || !stockEntry.items.length) {\n            frappe.throw(\"Invalid Sales Order or Stock Entry data\");\n        }\n    \n        const sourceWarehouse = `Main Dispatch Coldstore  - KF`;\n        \n        const itemCode = stockEntry.items[0].item_code;\n        const uom = stockEntry.items[0].uom;\n        const stem_length = stockEntry.custom_stem_length;\n        \n        // Quantity scanned should always be one per scan\n        const quantity = 1;\n        const customerId = orderPick.customer;\n        const sales_order_id = orderPick.sales_order;\n        \n        // Check the opl for the row that matches the variety \n    \n        \n        \n        const stem_from_bunch = {\n            \"Bunch(5)\": 5,\n            \"Bunch(6)\": 6,\n            \"Bunch(10)\": 10,\n            \"Bunch(12)\": 12,\n            \"Bunch(25)\": 25,\n        } \n        \n        const bunch_stems = stem_from_bunch[uom];\n\n        // Get box id from box label\n        // const boxLabelDoc = await frappe.db.get_doc('Box Label', boxStickerDocId);\n        // const boxId = boxLabelDoc.box_number;\n        \n        // Create new Farm Pack List document\n        const packListDoc = frappe.model.get_new_doc(\"Farm Pack List\");\n        packListDoc.custom_sales_order = sales_order_id;\n        packListDoc.custom_farm = farm;\n        packListDoc.pack_list_item = [{\n            item_code: itemCode,\n            bunch_uom: uom,\n            bunch_qty: quantity,\n            source_warehouse: sourceWarehouse,\n            sales_order_id: sales_order_id,\n            customer_id: customerId,\n            custom_number_of_stems: bunch_stems,\n            stem_length: stem_length,\n            box_id: box_id,\n        }];\n        \n        // Save document\n        const savedDoc = await frappe.db.insert(packListDoc);\n        \n        farmPackListDocId = savedDoc.name;\n    \n        // frappe.msgprint(\"Farm Pack List entry created successfully!\");\n    } catch (error) {\n        console.error(\"Error saving Farm Pack List:\", error);\n        frappe.throw(`Error saving Farm Pack List: ${error.message}`);\n    }\n    \n} \n\n\n\nasync function addBunchToFarmPackList(farmPackListDocId, bunchStockEntryName, oplName, farm, box_id) {\n    \n    // Get box id from box label\n    // const boxLabelDoc = await frappe.db.get_doc('Box Label', boxStickerDocId);\n    // const boxId = boxLabelDoc.box_number;\n    // If box Id is different from the existing one and variety is same, place it on another row\n    try {\n        await frappe.call({\n            method: 'upande_kikwetu.server_scripts.update_farm_pack_list.add_bunch_to_farm_pack_list',\n            args: {\n                farm_pack_list_doc_id: farmPackListDocId,\n                bunch_SE_name: bunchStockEntryName,\n                opl_name: oplName, \n                farm: farm,\n                box_id: box_id\n            },\n            callback: function (response) {\n                // frappe.msgprint(`Added bunch to Farm Pack List: ${farmPackListDocId}`);\n            }\n        });\n    } catch (error) {\n        console.error('Error adding bunch to Farm Pack List:', error);\n        frappe.throw(`Error adding bunch to Farm Pack List: ${error}`);\n    }\n}\n\n\n\nasync function getSalesOrderAndFarmFromOPL(oplName) {\n    const oplDoc = await frappe.db.get_doc('Order Pick List', oplName);\n    \n    const farmName = oplDoc.locations[0].warehouse?.split(\" \")[0]\n                    || oplDoc.source_warehouse?.split(\" \")[0]\n                    || oplDoc.locations[0].custom_source_warehouse?.split(\" \")[0]\n                    || \"Unknown\";\n                    \n    return {\n        sales_order: oplDoc.sales_order,\n        farm: farmName\n    };\n}\n\nasync function validateLabels(oplName, bunchLabelData, scannedItems, frm) {\n    const { sales_order, farm } = await getSalesOrderAndFarmFromOPL(oplName);\n    let orderPickVariety;\n    let stockEntryUOM;\n    let stockEntryVariety;\n    \n    // Total bunches should be fetched from the OPL row for the variety\n    let totalBunches = 0;\n    let scannedBunches = 0;\n    let box_number = 0;\n    \n    const bunchData = JSON.parse(bunchLabelData);\n    \n    try {\n        stockEntryVariety = bunchData.variety;\n        stockEntryUOM = bunchData.bunch_size;\n    } catch (error) {\n        frappe.throw(`Error fetching bunch data: ${error}`);\n    }\n    \n    const existingFPL = await frappe.db.get_list(\"Farm Pack List\", {\n        filters: {\n            custom_sales_order: sales_order,\n            custom_farm: farm\n        },\n        fields: [\"name\", \"docstatus\"]\n    });\n    \n    const isSubmitted = existingFPL.some(fpl => fpl.docstatus === 1);\n    \n    if (isSubmitted) {\n        frappe.throw(\"Farm Pack List already submitted. Check your Order Pick List and scan again\");\n    }\n    \n    try {\n        const orderPickList = await frappe.db.get_doc(\"Order Pick List\", oplName);\n        \n        if (!orderPickList || !orderPickList.locations || orderPickList.locations.length === 0) {\n            frappe.msgprint(`No valid Order Pick List found for ${oplName}`);\n            return { totalItems: 0, scannedItems: 0, valid: false };\n        }\n        \n        totalBunches = orderPickList.locations.reduce((sum, row) => {\n            return sum + (row.qty || 0);\n        }, 0);\n        \n        frm.set_value('total_bunches', totalBunches);\n        \n        // Find matching rows in OPL for the scanned variety and UOM\n        const matchingOPLRows = orderPickList.locations.filter(row => \n            row.item_code === stockEntryVariety && row.uom === stockEntryUOM\n        );\n        \n        if (matchingOPLRows.length === 0) {\n            frappe.throw(`No matching variety ${stockEntryVariety} with UOM ${stockEntryUOM} found in Order Pick List`);\n            return { totalItems: 0, scannedItems: 0, valid: false };\n        }\n        \n        // Initialize box_id with null to ensure we explicitly set it\n        let box_id = null;\n        \n        if (!existingFPL.length) {\n            // If no existing FPL, use the first matching OPL row's box_id\n            box_id = matchingOPLRows[0].custom_box_id;\n        } else {\n            // Get the FPL document\n            const fplDoc = await frappe.db.get_doc(\"Farm Pack List\", existingFPL[0].name);\n            const fplTable = fplDoc.pack_list_item || [];\n            \n            // Track scanned bunches for each box of this variety+UOM\n            const boxScannedCounts = {};\n            \n            // Count bunches already scanned for each box\n            fplTable.forEach(fplRow => {\n                if (fplRow.item_code === stockEntryVariety && fplRow.bunch_uom === stockEntryUOM) {\n                    const boxKey = fplRow.box_id.toString();\n                    boxScannedCounts[boxKey] = (boxScannedCounts[boxKey] || 0) + fplRow.bunch_qty;\n                }\n            });\n            \n            // Find the first box that isn't full\n            for (const oplRow of matchingOPLRows) {\n                const boxKey = oplRow.custom_box_id.toString();\n                const scannedForBox = boxScannedCounts[boxKey] || 0;\n                \n                // If this box has fewer scanned bunches than required\n                if (scannedForBox < oplRow.qty) {\n                    box_id = oplRow.custom_box_id;\n                    break;\n                }\n            }\n            \n            // If all boxes are full or no box was found\n            if (box_id === null && matchingOPLRows.length > 0) {\n                frappe.msgprint(`All boxes for ${stockEntryVariety} with UOM ${stockEntryUOM} are full.`);\n                // Use the last box as fallback\n                box_id = matchingOPLRows[matchingOPLRows.length - 1].custom_box_id;\n            }\n            \n            // Calculate total scanned bunches\n            fplTable.forEach(row => {\n                scannedBunches += row.bunch_qty;\n            });\n            \n            // Check if all required bunches for this variety are already scanned\n            const requiredBunchesForVariety = matchingOPLRows.reduce((sum, row) => sum + (row.qty || 0), 0);\n            const scannedBunchesForVariety = fplTable\n                .filter(row => row.item_code === stockEntryVariety && row.bunch_uom === stockEntryUOM)\n                .reduce((sum, row) => sum + (row.bunch_qty || 0), 0);\n                \n            if (scannedBunchesForVariety >= requiredBunchesForVariety) {\n                frappe.msgprint(`Excess ${stockEntryVariety} scanned for this order`);\n                return { totalItems: totalBunches, scannedItems: scannedBunches, valid: false };\n            }\n        }\n        \n        // Verify the scanned variety matches an expected variety in OPL\n        for (let i = 0; i < orderPickList.locations.length; i++) {\n            let currVariety = orderPickList.locations[i].item_code;\n            let currUOM = orderPickList.locations[i].uom;\n            \n            if (currVariety === stockEntryVariety) {\n                orderPickVariety = currVariety;\n                \n                if (currUOM !== stockEntryUOM) {\n                    frappe.throw(`Scanned wrong bunch size ${currVariety}: Expected ${currUOM}, but scanned ${stockEntryUOM}`);\n                }\n            }\n        }\n        \n        // Make sure box_id is always set\n        if (box_id === null) {\n            frappe.throw(`Could not determine appropriate box ID for ${stockEntryVariety}`);\n            return { totalItems: totalBunches, scannedItems: scannedBunches, valid: false };\n        }\n        \n        // Set box_number to the determined box_id\n        box_number = box_id;\n        \n    } catch (error) {\n        frappe.throw(`Error processing data: ${error}`);\n    }\n    \n    return {\n        totalItems: totalBunches,\n        scannedItems: scannedBunches,\n        box_number: box_number,\n        valid: orderPickVariety === stockEntryVariety\n    };\n}\n\n\n\nfunction toggle_scan_data_field(frm) {\n    if (frm.doc.farm && frm.doc.action) {\n        frm.set_df_property('scan_data', 'hidden', 0);\n        \n        setTimeout(() => {\n            frm.fields_dict.scan_data.$wrapper.find('input').focus();\n        }, 300);\n\n    } else {\n        frm.set_df_property('scan_data', 'hidden', 1);\n    }\n}\n\n\n\nasync function createStockEntry(scan_value, farm, action, audio) {\n    let variety;\n    let qty;\n    let grower;\n    let uom;\n    let harvester;\n    let greenhouse;\n    let block__bed_number;\n    let stockEntryDoc;\n\n    if (action === \"Receiving\") {\n        try {\n            const { bucket_id } = JSON.parse(scan_value);\n\n            // Step 1: Validate the Bucket QR Code status\n            const normalizedBucketId = bucket_id.toUpperCase();\n            const bucketDocResponse = await frappe.db.get_value(\n                'Bucket QR Code',\n                normalizedBucketId,\n                ['name', 'custom_status', 'last_stock_entry']\n            );\n\n            if (!bucketDocResponse || !bucketDocResponse.message || !bucketDocResponse.message.name) {\n                throw new Error(`Invalid bucket_id: ${normalizedBucketId}. Not found in Bucket QR Code records.`);\n            }\n\n            const bucketDoc = bucketDocResponse.message;\n            const bucketName = bucketDoc.name;\n\n            // Check if the bucket is \"In Use\"\n            if (bucketDoc.custom_status !== \"In Use\") {\n                throw new Error(`Bucket ${normalizedBucketId} is not in use. Current status: ${bucketDoc.custom_status || \"Not Set\"}. Cannot proceed with receiving.`);\n            }\n\n            // Step 2: Retrieve the last_stock_entry\n            const lastStockEntry = bucketDoc.last_stock_entry;\n            if (!lastStockEntry) {\n                throw new Error(`No last stock entry found for bucket_id: ${normalizedBucketId}. Cannot proceed with receiving.`);\n            }\n\n            // Step 3: Fetch the Stock Entry details using last_stock_entry\n            const stockEntryDoc = await frappe.db.get_doc('Stock Entry', lastStockEntry);\n\n            // Check if the Stock Entry has already been scanned (using custom_scanned)\n            // if (stockEntryDoc.custom_scanned) {\n            //     throw new Error(\"Bucket already scanned!\");\n            // }\n\n            // Mark the Stock Entry as scanned\n            await frappe.call({\n                method: \"upande_kikwetu.server_scripts.update_custom_scanned.update_custom_scanned\",\n                args: { stock_entry_name: stockEntryDoc.name }\n            });\n\n            const items = stockEntryDoc.items;\n            greenhouse = stockEntryDoc.custom_greenhouse;\n            harvester = stockEntryDoc.custom_harvester || stockEntryDoc.custom_harvester_payroll_number;\n            block__bed_number = stockEntryDoc.custom_block__bed_number;\n\n            if (Array.isArray(items) && items.length > 0) {\n                variety = items[0].item_code;\n                qty = items[0].qty;\n            }\n\n            // Step 4: Perform the stock transfer (already handled by the existing logic)\n            const stock_entry_type_mapping = {\n                \"Receiving\": \"Receiving\",\n                \"Packing\": \"Packing\",\n                \"Receiving Quarantined\": \"Receiving Quarantined\",\n            };\n\n            const stock_entry_type = stock_entry_type_mapping[action];\n            const locationMapping = {\n                \"Main Receiving\": { source: `${greenhouse}`, target: \"Main Receiving Cold Store  - KF\" },\n                \"Main Packing\": { source: \"Main Receiving Cold Store - KF\", target: \"Goods In Transit - KF\" },\n                \"EX-LEWA Receiving\": { source: `${greenhouse}`, target: \"EX-LEWA Receiving Cold Store - KF\" },\n                \"EX-LEWA Packing\": { source: \"EX-LEWA Receiving Cold Store - KF\", target: \"Goods In Transit - KF\" },\n            };\n\n            const scanLocation = `${farm} ${action}`;\n            const stockmvt = locationMapping[scanLocation];\n\n            if (!stockmvt) {\n                throw new Error(`Invalid scan location: ${scanLocation}`);\n            }\n\n            const stock_entry_data = {\n                \"location data\": stockmvt,\n                \"variety\": variety,\n                \"quantity\": qty,\n                \"grower\": grower,\n                \"harvester\": harvester,\n                \"greenhouse\": greenhouse,\n                \"stock entry type\": stock_entry_type,\n                \"uom\": uom,\n                \"block__bed_number\": block__bed_number\n            };\n\n            const created_stock_entry = await frappe.call({\n                method: \"upande_kikwetu.server_scripts.create_stock_entry.create_stock_entry\",\n                args: {\n                    stock_entry_data: JSON.stringify(stock_entry_data),\n                }\n            });\n\n            // Step 5: Update the Bucket QR Code status to \"Available\" and clear last_stock_entry\n            console.log(\"Updating Bucket QR Code status to Available...\");\n            await frappe.db.set_value('Bucket QR Code', bucketName, {\n                custom_status: 'Available',\n                last_stock_entry: null // Clear the last_stock_entry\n            });\n\n            audio.play();\n            frappe.msgprint(`Harvester: ${harvester}, Greenhouse: ${greenhouse}, Bay: ${block__bed_number}, No. of Stems: ${qty}`);\n            frappe.msgprint(`Bucket ${normalizedBucketId} status updated to Available.`);\n\n            return created_stock_entry;\n\n        } catch (error) {\n            if (error.message.includes(\"Bucket already scanned!\")) {\n                console.log(error.message);\n                throw error;\n            }\n            throw new Error(`Failed to process Receiving: ${error.message}`);\n        }\n    }\n\n    if (action === \"Packing\") {\n        const stockEntryName = scan_value;\n        \n        try {\n            stockEntryDoc = await frappe.db.get_doc('Stock Entry', stockEntryName);\n        } catch (error) {\n            throw new Error(`Failed to fetch Stock Entry: ${error.message}`);\n        }\n        \n        const items = stockEntryDoc.items;\n        \n        items.forEach((item) => {\n            variety = item.item_code;\n            qty = 1; // Flowers are packed per 1 bunch\n            uom = item.uom;\n        });\n    }\n\n    if (action === \"Receiving Quarantined\") {\n        try {\n            const { bucket_id } = JSON.parse(scan_value);\n            \n            const stockEntries = await frappe.db.get_list('Stock Entry', {\n                filters: {\n                    'custom_bucket_id': bucket_id,\n                    'docstatus': 1\n                },\n                fields: ['name', 'custom_scanned', 'custom_greenhouse', 'custom_harvester', 'custom_block__bed_number', 'items']\n            });\n            \n            if (stockEntries.length === 0) {\n                throw new Error(`No Stock Entry found for bucket_id: ${bucket_id}`);\n            }\n            \n            const stockEntryDoc = await frappe.db.get_doc('Stock Entry', stockEntries[0].name);\n            \n            if (stockEntryDoc.custom_scanned) {\n                throw new Error(\"Bucket already scanned!\");\n            }\n            \n            const items = stockEntryDoc.items;\n            greenhouse = stockEntryDoc.custom_greenhouse;\n            harvester = stockEntryDoc.custom_harvester;\n            block__bed_number = stockEntryDoc.custom_block__bed_number;\n    \n            if (Array.isArray(items) && items.length > 0) {\n                variety = items[0].item_code;\n                qty = items[0].qty;\n            }\n            \n            audio.play();\n            frappe.msgprint(`Harvester: ${harvester}, Greenhouse: ${greenhouse}, Bay: ${block__bed_number}, No. of Stems: ${qty}`);\n            \n            await frappe.call({\n                method: \"upande_kikwetu.server_scripts.update_custom_scanned.update_custom_scanned\",\n                args: { stock_entry_name: stockEntryDoc.name }\n            });\n            \n        } catch (error) {\n            if (error.message.includes(\"Bucket already scanned!\")) {\n                console.log(error.message);\n                throw error;\n            }\n            throw new Error(`Failed to fetch Stock Entry: ${error.message}`);\n        }\n    }\n\n    const stock_entry_type_mapping = {\n        \"Receiving\": \"Receiving\",\n        \"Packing\": \"Packing\",\n        \"Receiving Quarantined\": \"Receiving Quarantined\",\n    };\n    \n    const stock_entry_type = stock_entry_type_mapping[action];\n    \n    const locationMapping = {\n        \"Main Receiving\": { source: `${greenhouse}`, target: \"Main Receiving Cold Store  - KF\" },\n        \"Main Packing\": { source: \"Main Receiving Cold Store - KF\", target: \"Goods In Transit - KF\" },\n        \"EX-LEWA Receiving\": { source: `${greenhouse}`, target: \"EX-LEWA Receiving Cold Store - KF\" },\n        \"EX-LEWA Packing\": { source: \"EX-LEWA Receiving Cold Store - KF\", target: \"Goods In Transit - KF\" },\n    };\n    \n    const scanLocation = `${farm} ${action}`;\n    \n    const stockmvt = locationMapping[scanLocation];\n\n    if (!stockmvt) {\n        throw new Error(`Invalid scan location: ${scanLocation}`);\n    }\n\n    const stock_entry_data = {\n        \"location data\": stockmvt,\n        \"variety\": variety,\n        \"quantity\": qty,\n        \"grower\": grower,\n        \"harvester\": harvester,\n        \"greenhouse\": greenhouse,\n        \"stock entry type\": stock_entry_type,\n        \"uom\": uom,\n        \"block__bed_number\": block__bed_number\n    };\n    \n    const created_stock_entry = await frappe.call({\n        method: \"upande_kikwetu.server_scripts.create_stock_entry.create_stock_entry\",\n        args: {\n            stock_entry_data: JSON.stringify(stock_entry_data),\n        }\n    });\n\n    return created_stock_entry;\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Harvest",
  "enabled": 1,
  "modified": "2025-04-24 23:59:32.235413",
  "module": "Upande Kikwetu",
  "name": "Harvest Scan V2",
  "script": "frappe.ui.form.on('Harvest', {\n    refresh(frm) {\n        frm.add_custom_button(\"Scan QR Code\", () => {\n            checkAndStartScanner();\n        });\n\n        function checkAndStartScanner() {\n            const { farm } = frm.doc;\n\n            if (!farm) {\n                frappe.msgprint(\"Please fill in the Farm field before scanning.\");\n                return;\n            }\n            \n            if (!window.Html5Qrcode) {\n                const script = document.createElement(\"script\");\n                script.src = \"https://cdnjs.cloudflare.com/ajax/libs/html5-qrcode/2.3.8/html5-qrcode.min.js\";\n                script.onload = () => {\n                    console.log(\"Html5Qrcode library loaded successfully.\");\n                    showQrScannerDialog();\n                };\n                script.onerror = () => {\n                    console.error(\"Failed to load Html5Qrcode library.\");\n                    frappe.msgprint(\"Failed to load QR scanning library. Please check your network connection.\");\n                };\n                document.head.appendChild(script);\n            } else {\n                showQrScannerDialog();\n            }\n        }\n\n        function showQrScannerDialog() {\n            const dialog = new frappe.ui.Dialog({\n                title: \"Scan QR Code\",\n                fields: [\n                    { fieldname: 'qr_scanner', fieldtype: 'HTML', options: '' }\n                ]\n            });\n\n            const $wrapper = dialog.fields_dict.qr_scanner.$wrapper;\n            $wrapper.html('<div id=\"qr-reader\" style=\"width: 100%;\"></div>');\n\n            dialog.show();\n\n            setTimeout(() => {\n                const qrReaderElement = document.getElementById(\"qr-reader\");\n                if (qrReaderElement) {\n                    initializeQrScanner(qrReaderElement, dialog);\n                } else {\n                    console.error(\"QR Reader element not found!\");\n                    frappe.msgprint(\"Error initializing QR scanner. Please try again.\");\n                }\n            }, 300);\n        }\n\n        let isProcessing = false;\n\n        async function initializeQrScanner(qrReaderElement, dialog) {\n            const html5QrCode = new Html5Qrcode(\"qr-reader\");\n\n            html5QrCode.start(\n                { facingMode: \"environment\" },\n                {\n                    fps: 15,\n                    qrbox: { width: 250, height: 250 }\n                },\n                async (decodedText, decodedResult) => {\n                    if (isProcessing) return;\n                    isProcessing = true;\n\n                    try {\n                        // Parse the scanned QR code\n                        console.log(\"Scanned QR Code:\", decodedText);\n                        const { bucket_id } = JSON.parse(decodedText);\n                        if (!bucket_id) {\n                            throw new Error(\"Invalid QR code: bucket_id is missing.\");\n                        }\n\n                        // Normalize bucket_id to uppercase to match record names\n                        const normalizedBucketId = bucket_id.toUpperCase();\n                        console.log(\"Normalized Bucket ID:\", normalizedBucketId);\n\n                        // Step 1: Check the Bucket QR Code status and last_stock_entry\n                        console.log(\"Checking Bucket QR Code status...\");\n                        const bucketDocResponse = await frappe.db.get_value(\n                            'Bucket QR Code',\n                            normalizedBucketId,\n                            ['name', 'custom_status', 'last_stock_entry']\n                        );\n\n                        if (!bucketDocResponse || !bucketDocResponse.message || !bucketDocResponse.message.name) {\n                            throw new Error(`Invalid bucket_id: ${normalizedBucketId}. Not found in Bucket QR Code records.`);\n                        }\n\n                        const bucketDoc = bucketDocResponse.message;\n                        const bucketStatus = bucketDoc.custom_status || \"Available\"; // Fallback to \"Available\" if not set\n\n                        // Check if the bucket is Available and has no last_stock_entry\n                        if (bucketStatus !== \"Available\") {\n                            throw new Error(`Bucket ${normalizedBucketId} is not available for harvesting. Current status: ${bucketStatus}.`);\n                        }\n\n                        if (bucketDoc.last_stock_entry) {\n                            throw new Error(`Bucket ${normalizedBucketId} is associated with Stock Entry ${bucketDoc.last_stock_entry}. It must be received and cleared before reuse.`);\n                        }\n\n                        // Step 2: Set the bucket_id on the Harvest form\n                        console.log(\"Setting bucket_id on Harvest form:\", normalizedBucketId);\n                        frm.set_value('bucket_id', normalizedBucketId);\n                        frm.refresh_fields(['item_code', 'bucket_id']);\n\n                        // Close the scanner dialog\n                        html5QrCode.stop();\n                        dialog.hide();\n\n                    } catch (error) {\n                        console.error(\"Error during QR Code scanning:\", error);\n                        frappe.msgprint(error.message || \"Scanned a Non-Harvesting Label. Please scan a valid Bucket label.\");\n                        setTimeout(() => {\n                            frappe.set_route('Form', frm.doctype, 'new');\n                        }, 2000);\n                        setTimeout(() => {\n                            window.location.reload();\n                        }, 1000);\n                    } finally {\n                        isProcessing = false;\n                        html5QrCode.stop();\n                        dialog.hide();\n                    }\n                },\n                (errorMessage) => {\n                    console.warn(\"Scanning error:\", errorMessage);\n                }\n            ).catch((err) => {\n                console.error(\"Error starting QR scanner:\", err);\n                frappe.msgprint(\"Unable to access the camera. Please ensure permissions are granted and try again.\");\n            });\n\n            dialog.on(\"hide\", function () {\n                html5QrCode.stop().then(() => {\n                    console.log(\"QR Scanner stopped.\");\n                }).catch((err) => {\n                    console.error(\"Error stopping QR scanner:\", err);\n                });\n            });\n        }\n\n        // Automatically start scanning when farm and block are filled\n        frm.fields_dict.farm.df.onchange = checkAndStartScanner;\n        frm.fields_dict.block.df.onchange = checkAndStartScanner;\n        frm.fields_dict.blck.df.onchange = checkAndStartScanner;\n        frm.fields_dict.bck.df.onchange = checkAndStartScanner;\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Material Request",
  "enabled": 0,
  "modified": "2025-04-25 07:53:18.598598",
  "module": "Upande Kikwetu",
  "name": "Chemical Request",
  "script": "frappe.ui.form.on('Material Request', {\n    validate(frm) {\n        const chemicalGroups = [\"Chemical\", \"Fertiliser\"];\n        const isChemicalRequest = frm.doc.items.some(item =>\n            chemicalGroups.includes(item.item_group)\n        );\n        frm.set_value(\"is_chemical_request\", isChemicalRequest ? 1 : 0);\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Harvest",
  "enabled": 1,
  "modified": "2025-04-25 01:04:08.984951",
  "module": null,
  "name": "Change status after save",
  "script": "frappe.ui.form.on('Harvest', {\n    after_save: async function(frm) {\n        try {\n            const bucket_id = frm.doc.bucket_id;\n            if (!bucket_id) {\n                throw new Error(\"Bucket ID is missing in the Harvest form.\");\n            }\n            const normalizedBucketId = bucket_id.toUpperCase();\n            const bucketDocResponse = await frappe.db.get_value(\n                'Bucket QR Code',\n                normalizedBucketId,\n                ['name', 'custom_status', 'last_stock_entry']\n            );\n\n            if (!bucketDocResponse || !bucketDocResponse.message || !bucketDocResponse.message.name) {\n                throw new Error(`Invalid bucket_id: ${normalizedBucketId}. Not found in Bucket QR Code records.`);\n            }\n            const bucketDoc = bucketDocResponse.message;\n            const bucketName = bucketDoc.name;\n            let status = bucketDoc.custom_status || \"Available\";\n            if (!bucketDoc.custom_status) {\n                console.warn(`Bucket ${normalizedBucketId} has no custom_status value. Defaulting to \"Available\".`);\n                await frappe.db.set_value('Bucket QR Code', bucketName, 'custom_status', 'Available');\n                status = \"Available\";\n            }\n            if (status !== \"Available\") {\n                throw new Error(`Bucket ${normalizedBucketId} is not available. Current status: ${status}`);\n            }\n\n            const stockEntries = await frappe.db.get_list(\"Stock Entry\", {\n                filters: {\n                    custom_bucket_id: normalizedBucketId,\n                    docstatus: 1 \n                },\n                fields: [\"name\"],\n                order_by: \"creation desc\", \n                limit: 1\n            });\n\n            if (!stockEntries || stockEntries.length === 0) {\n                throw new Error(`No submitted Stock Entry found for bucket_id: ${normalizedBucketId}. Ensure the server script ran successfully.`);\n            }\n\n            const stock_entry_name = stockEntries[0].name;\n            await frappe.db.set_value('Bucket QR Code', bucketName, {\n                custom_status: 'In Use',\n                last_stock_entry: stock_entry_name\n            });\n            frappe.show_alert({ message: `Saved successfully! Bucket ${normalizedBucketId} marked as In Use for Stock Entry ${stock_entry_name}.`, indicator: 'green' });\n            setTimeout(() => {\n                frappe.set_route('Form', frm.doctype, 'new');\n            }, 1000);\n\n            setTimeout(() => {\n                window.location.reload();\n            }, 1000);\n\n        } catch (error) {\n            console.error(\"Error after saving Harvest form:\", error);\n            frappe.msgprint(error.message || \"An error occurred while processing the Harvest form.\");\n        }\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 1,
  "modified": "2025-04-25 09:31:42.560696",
  "module": null,
  "name": "Sales invoice Status",
  "script": "frappe.listview_settings['Sales Invoice'] = {\n    add_fields: ['status'], // Ensure the status field is fetched\n    onload(listview) {\n        console.log(\"Sales Invoice List View script loaded\");\n    },\n    refresh(listview) {\n        console.log(\"Refreshing Sales Invoice List View\");\n        console.log(\"List data:\", listview.data); // Debug: Log the data to verify status values\n\n        setTimeout(() => {\n            listview.$result.find('.list-row').each(function(index) {\n                const $row = $(this);\n                const doc = listview.data[index]; // Get the row's data\n                const status = doc.status || \"\"; // Access the status field directly\n\n                // Debug: Log the status for each row\n                console.log(\"Row status:\", status);\n\n                // Only display \"Paid\" or \"Unpaid\", clear others\n                let displayStatus = \"\";\n                if (status === \"Paid\") {\n                    displayStatus = \"Paid\";\n                } else if (status === \"Unpaid\") {\n                    displayStatus = \"Unpaid\";\n                }\n\n                // Update the status column (3rd column)\n                $row.find('td:nth-child(3)').text(displayStatus);\n                if (!displayStatus) {\n                    $row.find('td:nth-child(3)').css({\n                        'background-color': 'transparent',\n                        'color': 'transparent'\n                    });\n                }\n            });\n        }, 500); // Delay to ensure Frappe rendering is complete\n    }\n};",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Farm Pack List",
  "enabled": 1,
  "modified": "2025-04-26 11:45:05.441256",
  "module": "Upande Tambuzi",
  "name": "OPL Stems Calc Automation to FPL",
  "script": "frappe.ui.form.on('Farm Pack List', {\n    refresh: function(frm) {\n        calculate_totals(frm);\n    },\n    validate: function(frm) {\n        calculate_totals(frm);\n    },\n    order_picklist: function(frm) {\n        // Recalculate when the linked Order Picklist changes\n        calculate_totals(frm);\n    }\n});\n\nfrappe.ui.form.on('Pack List Item', {\n    custom_number_of_stems: function(frm, cdt, cdn) {\n        calculate_totals(frm);\n    },\n    pack_list_item_remove: function(frm) {\n        calculate_totals(frm);\n    }\n});\n\nfunction calculate_totals(frm) {\n    // Calculate total stems in Farm Pack List\n    let total_stems = 0;\n    if (frm.doc.pack_list_item) {\n        frm.doc.pack_list_item.forEach(item => {\n            total_stems += flt(item.custom_number_of_stems) || 0;\n        });\n    }\n\n    // Update custom_total_stems only if changed\n    if (frm.doc.custom_total_stems !== total_stems) {\n        frm.set_value('custom_total_stems', total_stems);\n    }\n\n    // Calculate completion percentage\n    if (frm.doc.order_picklist) {\n        // Fetch total stems from Order Picklist\n        frappe.db.get_value('Order Picklist', frm.doc.order_picklist, 'total_stems', (r) => {\n            let order_total_stems = flt(r.total_stems) || 0;\n            let completion_percentage = 0;\n\n            // Calculate percentage: (packed stems / order stems) * 100\n            if (order_total_stems > 0) {\n                completion_percentage = (total_stems / order_total_stems) * 100;\n                // Round to 2 decimal places\n                completion_percentage = flt(completion_percentage, 2);\n            }\n\n            // Update completion percentage only if changed\n            if (frm.doc.custom_completion_percentage !== completion_percentage) {\n                frm.set_value('custom_completion_percentage', completion_percentage);\n            }\n        });\n    } else {\n        // If no Order Picklist is linked, set completion percentage to 0\n        if (frm.doc.custom_completion_percentage !== 0) {\n            frm.set_value('custom_completion_percentage', 0);\n        }\n    }\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Stock Entry",
  "enabled": 1,
  "modified": "2025-03-28 12:28:32.692244",
  "module": "Upande Kikwetu",
  "name": "Ensure Uppercase in Bay Field",
  "script": "frappe.ui.form.on('Stock Entry Detail', {\n\tcustom_bay(frm, cdt, cdn) {\n\t\tlet row = locals[cdt][cdn]; \n        let value = row.custom_bay || '';\n        frappe.model.set_value(cdt, cdn, 'custom_bay', value.toUpperCase());\n\t}\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Label Print",
  "enabled": 1,
  "modified": "2025-03-28 14:28:09.020556",
  "module": "Upande Kikwetu",
  "name": "Generate Bucket Codes",
  "script": "frappe.ui.form.on('Label Print', {\n\tafter_save(frm) {\n\t    let variety;\n\t    let number_of_labels;\n\t    let doc_name;\n\t    let action;\n\t    let farm;\n\t    let stem_length;\n\t    let bunch_size, grader, day_code;\n\t    \n\t    let args = {\n\t        action : frm.doc.action,\n\t        label_doc_name: frm.doc.name,\n\t        \n\t    };\n\t    \n\t    if (frm.doc.action === 'Harvesting Label') {\n\t        args.variety = frm.doc.item_code;\n    \t\targs.no_of_labels = frm.doc.number_of_labels;\n\n\t    } else if (frm.doc.action === 'Bunch Label') {\n\t        args.variety = frm.doc.variety;\n\t        args.no_of_labels = frm.doc.no_of_labels;\n\t        args.farm = frm.doc.farm;\n\t        args.stem_length = frm.doc.stem_length;\n\t        args.bunch_size = frm.doc.bunch_size;\n\t        \n\t    } else if (frm.doc.action === 'Grader Label') {\n\t        args.grader = frm.doc.grader;\n\t        args.no_of_labels = frm.doc.qty_of_labels;\n\t        args.day_code = frm.doc.day_code;\n\t    }\n\t    \n\t    \n\t\t\n\t\tlet bucket_id;\n\t\t\n\t\tfrappe.call({\n\t\t    method: \"upande_kikwetu.server_scripts.gen_label_id.generate_id\",\n\t\t    args: args,\n\t\t    callback:(response) => {\n\t\t        console.log(response);\n\t\t    }\n\t\t});\n\t\t\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Harvest",
  "enabled": 1,
  "modified": "2025-03-23 18:50:20.123937",
  "module": "Upande Kikwetu",
  "name": "Harvest Scan",
  "script": "frappe.ui.form.on('Harvest', {\n    refresh(frm) {\n        frm.add_custom_button(\"Scan QR Code\", () => {\n            checkAndStartScanner();\n        });\n\n        function checkAndStartScanner() {\n            const { farm, block, blck, bck } = frm.doc;\n\n            if (!farm || (!block && !blck && !bck) ) {\n                return;\n            }\n            \n            if (!window.Html5Qrcode) {\n                const script = document.createElement(\"script\");\n                script.src = \"https://cdnjs.cloudflare.com/ajax/libs/html5-qrcode/2.3.8/html5-qrcode.min.js\";\n                script.onload = () => {\n                    console.log(\"Html5Qrcode library loaded successfully.\");\n                    showQrScannerDialog();\n                };\n                script.onerror = () => {\n                    console.error(\"Failed to load Html5Qrcode library.\");\n                    frappe.msgprint(\"Failed to load QR scanning library. Please check your network connection.\");\n                };\n                document.head.appendChild(script);\n            } else {\n                showQrScannerDialog();\n            }\n        }\n\n        function showQrScannerDialog() {\n            const dialog = new frappe.ui.Dialog({\n                title: \"Scan QR Code\",\n                fields: [\n                    { fieldname: 'qr_scanner', fieldtype: 'HTML', options: '' }\n                ]\n            });\n\n            const $wrapper = dialog.fields_dict.qr_scanner.$wrapper;\n            $wrapper.html('<div id=\"qr-reader\" style=\"width: 100%;\"></div>');\n\n            dialog.show();\n\n            setTimeout(() => {\n                const qrReaderElement = document.getElementById(\"qr-reader\");\n                if (qrReaderElement) {\n                    initializeQrScanner(qrReaderElement, dialog);\n                } else {\n                    console.error(\"QR Reader element not found!\");\n                    frappe.msgprint(\"Error initializing QR scanner. Please try again.\");\n                }\n            }, 300);\n        }\n\n        let isProcessing = false;\n\n        function initializeQrScanner(qrReaderElement, dialog) {\n            const html5QrCode = new Html5Qrcode(\"qr-reader\");\n\n            html5QrCode.start(\n                { facingMode: \"environment\" },\n                {\n                    fps: 15,\n                    qrbox: { width: 250, height: 250 }\n                },\n                async (decodedText, decodedResult) => {\n                    if (isProcessing) return;\n                    isProcessing = true;\n\n                    try {\n                        const { bucket_id} = JSON.parse(decodedText);\n                        \n                        const existingStockEntry = await frappe.db.get_list(\"Stock Entry\",{\n                            filters:  {\n                                \"custom_bucket_id\": bucket_id,\n                                docstatus: 1\n                            },\n                            fields: name\n                        });\n                        \n                        if (existingStockEntry.length > 0) {\n                            frappe.msgprint(`Bucket ID ${bucket_id} is already associated with a stock entry.`);\n                            setTimeout(() => {\n                                frappe.set_route('Form', frm.doctype, 'new');\n                            }, 2000);\n                            \n                            setTimeout(() => {\n                                window.location.reload();\n                            }, 1000);\n                        }\n                            \n                        frm.set_value('bucket_id', bucket_id);\n                        frm.refresh_fields(['item_code', 'bucket_id']);\n                        html5QrCode.stop();\n                        dialog.hide();\n                        \n\n                    } catch (e) {\n                        frappe.msgprint(\"Scanned a Non-Harvesting Label. Please scan a valid Bucket label.\")\n                        setTimeout(() => {\n                            frappe.set_route('Form', frm.doctype, 'new');\n                        }, 2000);\n                        \n                        setTimeout(() => {\n                            window.location.reload();\n                        }, 1000);\n                        console.error(\"Error parsing QR Code:\", error)\n                    }\n\n                    html5QrCode.stop();\n                    dialog.hide();\n                },\n                (errorMessage) => {\n                    console.warn(\"Scanning error:\", errorMessage);\n                }\n            ).catch((err) => {\n                console.error(\"Error starting QR scanner:\", err);\n                frappe.msgprint(\"Unable to access the camera. Please ensure permissions are granted and try again.\");\n            });\n\n            dialog.on(\"hide\", function () {\n                html5QrCode.stop().then(() => {\n                    console.log(\"QR Scanner stopped.\");\n                }).catch((err) => {\n                    console.error(\"Error stopping QR scanner:\", err);\n                });\n            });\n        }\n\n        // Automatically start scanning when farm and block are filled\n        frm.fields_dict.farm.df.onchange = checkAndStartScanner;\n        frm.fields_dict.block.df.onchange = checkAndStartScanner;\n        frm.fields_dict.blck.df.onchange = checkAndStartScanner;\n        frm.fields_dict.bck.df.onchange = checkAndStartScanner;\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Stock Entry",
  "enabled": 1,
  "modified": "2025-02-22 13:17:55.103138",
  "module": "Upande Kikwetu",
  "name": "Archive Employee",
  "script": "frappe.ui.form.on('Stock Entry', {\n    onload: function (frm) {\n        frm.fields_dict['custom_graded_by'].get_query = function() {\n            return {\n                filters: {\n                    'custom_archived': 0\n                }\n            };\n        };\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Scan",
  "enabled": 0,
  "modified": "2025-03-11 12:55:52.851477",
  "module": "Upande Kikwetu",
  "name": "Scan QR Button",
  "script": "frappe.ui.form.on('Scan', {\n    refresh(frm) {\n        frm.add_custom_button(\"Scan QR Code\", () => {\n            \n            const farm = cur_frm.doc.farm;\n            const action = cur_frm.doc.action;\n                        \n            if (!farm || !action) {\n                frappe.throw(\"Please select a farm and action before scanning.\");\n                return;\n            }\n            \n            if (!window.Html5Qrcode) {\n                const script = document.createElement(\"script\");\n                script.src = \"https://unpkg.com/html5-qrcode\";\n                script.onload = () => {\n                    console.log(\"Html5Qrcode library loaded successfully.\");\n                    showQrScannerDialog();\n                };\n                script.onerror = () => {\n                    console.error(\"Failed to load Html5Qrcode library.\");\n                    frappe.msgprint(\"Failed to load QR scanning library. Please check your network connection.\");\n                };\n                document.head.appendChild(script);\n            } else {\n                showQrScannerDialog();\n            }\n            \n            \n            \n            function showQrScannerDialog() {\n                const dialog = new frappe.ui.Dialog({\n                    title: \"Scan QR Code\",\n                    fields: [\n                        { fieldname: 'qr_scanner', fieldtype: 'HTML', options: '' }\n                    ]\n                });\n\n                const $wrapper = dialog.fields_dict.qr_scanner.$wrapper;\n                $wrapper.html('<div id=\"qr-reader\" style=\"width: 100%;\"></div>');\n\n                dialog.show();\n\n                setTimeout(() => {\n                    const qrReaderElement = document.getElementById(\"qr-reader\");\n                    if (qrReaderElement) {\n                        initializeQrScanner(qrReaderElement, dialog);\n                    } else {\n                        console.error(\"QR Reader element not found!\");\n                        frappe.msgprint(\"Error initializing QR scanner. Please try again.\");\n                    }\n                }, 300);\n            }\n            \n            let isProcessing = false;\n            let createStock = false;\n            let boxLabelData  = null;\n            let isPaused = false;\n            let farmPackListDocId = null;\n            let boxStickerDocId = null;\n            let stockEntryDoc;\n            \n            function initializeQrScanner(qrReaderElement, dialog) {\n                const html5QrCode = new Html5Qrcode(\"qr-reader\");\n\n                html5QrCode.start(\n                    { facingMode: \"environment\" }, \n                    {\n                        fps: 15, \n                        qrbox: { width: 250, height: 250 } \n                    },\n                    async (decodedText, decodedResult) => {\n                        if (isProcessing || isPaused) {\n                            return;\n                        }\n                        isProcessing = true;\n                        \n                        \n                        \n                    },\n                    (errorMessage) => {\n                        console.warn(\"Scanning error:\", errorMessage);\n                    }\n                ).catch((err) => {\n                    console.error(\"Error starting QR scanner:\", err);\n                    frappe.msgprint(\"Unable to access the camera. Please ensure permissions are granted and try again.\");\n                });\n\n                dialog.on(\"hide\", function () {\n                    html5QrCode.stop().then(() => {\n                        console.log(\"QR Scanner stopped.\");\n                    }).catch((err) => {\n                        console.error(\"Error stopping QR scanner:\", err);\n                    });\n                });\n            }\n            \n            function getStockEntryIdFromUrl(stockEntryUrl) {\n                const stock_entry_url_arr = stockEntryUrl.split(\"/\");\n                const arrLength = stock_entry_url_arr.length;\n                const stock_entry_id = stock_entry_url_arr[arrLength - 1];\n                \n                return stock_entry_id;\n            }\n            \n            \n            \n        });\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Stock Entry",
  "enabled": 1,
  "modified": "2025-01-25 20:29:13.185615",
  "module": "Upande Kikwetu",
  "name": "Populate Number of Items",
  "script": "frappe.ui.form.on('Stock Entry', {\n    refresh: function(frm){\n        $.each(frm.doc.items, function(i, row){\n            if (row.uom == 'Stems') {\n                row.custom_number_of_stems = row.qty;\n            }\n        });\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Stock Entry",
  "enabled": 1,
  "modified": "2025-02-22 14:41:27.648541",
  "module": "Upande Kikwetu",
  "name": "Grading Stock Entry",
  "script": "frappe.ui.form.on('Stock Entry', {\n    custom_farm: function(frm) {\n        if (frm.doc.stock_entry_type === \"Grading\") {\n            let warehouseMapping = {\n                \"Burguret\": { source: \"Burguret Receiving Cold Store - TL\", target: \"Burguret Graded General - TL\" },\n                \"Turaco\": { source: \"Turaco Receiving Cold Store - TL\", target: \"Turaco Graded General - TL\" },\n                \"Pendekeza\": { source: \"Pendekeza Receiving Cold Store - TL\", target: \"Pendekeza Graded General - TL\" }\n            };\n\n            let selectedFarm = frm.doc.custom_farm;\n\n            if (selectedFarm && warehouseMapping[selectedFarm]) {\n                frm.set_value(\"from_warehouse\", warehouseMapping[selectedFarm].source);\n                frm.set_value(\"to_warehouse\", warehouseMapping[selectedFarm].target);\n            }\n        }\n    },\n    \n    custom_bunched_by: function(frm) {\n        if (frm.doc.stock_entry_type === \"Grading\") {\n            if (frm.doc.custom_bunched_by) {\n                let bunched_by_value = frm.doc.custom_bunched_by;\n\n                if (frm.doc.items && frm.doc.items.length > 0) {\n                    frm.doc.items.forEach((item, idx) => {\n                        frappe.model.set_value(item.doctype, item.name, 'uom', bunched_by_value); \n                    });\n                \n                } else {\n                    frappe.throw(\"No items found in the child table.\");\n                }\n\n            }\n        }\n    },\n\n    stock_entry_type: function(frm) {\n        if (frm.doc.stock_entry_type === \"Grading\") {\n            frm.trigger(\"custom_farm\");\n            frm.trigger(\"custom_bunched_by\");\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Stock Entry",
  "enabled": 1,
  "modified": "2025-03-31 20:44:08.467268",
  "module": "Upande Kikwetu",
  "name": "Field Rejects Stock Entry",
  "script": "// frappe.ui.form.on('Stock Entry', {\n//     custom_greenhouse: function(frm) {\n//         if (frm.doc.stock_entry_type === \"Field Rejects\") {\n//             const greenhouse = frm.doc.custom_greenhouse;\n            \n//             let warehouseMapping = {\n//                 \"Burguret\":{ target: `${greenhouse}` },\n//                 \"Turaco\":{ target: `${greenhouse}`},\n//                 \"Pendekeza\": { target: `${greenhouse}` }\n//             };\n            \n//             let selectedFarm = frm.doc.custom_farm;\n\n//             if (selectedFarm && warehouseMapping[selectedFarm]) {\n//                 // frm.set_value(\"from_warehouse\", warehouseMapping[selectedFarm].source);\n//                 frm.set_value(\"to_warehouse\", warehouseMapping[selectedFarm].target);\n//             }\n//         }\n//     },\n\n//     stock_entry_type: function(frm) {\n//         if (frm.doc.stock_entry_type === \"Field Rejects\") {\n//             frm.trigger(\"custom_greenhouse\");\n//         }\n//     }\n// });\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Stock Entry",
  "enabled": 1,
  "modified": "2025-03-11 16:53:28.012126",
  "module": "Upande kikwetu",
  "name": "Qr Code gen",
  "script": "frappe.ui.form.on('Stock Entry', {\n    before_submit: function(frm) {\n        if (frm.doc.docstatus === 0 && ( frm.doc.stock_entry_type === 'Grading' || frm.doc.stock_entry_type === 'Grading without Receiving') ) {\n            \n            const grading_details = {\n                \"name\": frm.doc.name,\n                \"variety\": frm.doc.items[0].item_code,\n                \"grader\": frm.doc.custom_graded_by,\n                \"qty\": frm.doc.items[0].qty,\n            };\n            \n            const response = frappe.call({\n                method: \"upande_kikwetu.server_scripts.qr_code_generator.generate_qr_code\",\n                args: {\n                    stock_entry_details: JSON.stringify(grading_details)\n                },\n            });\n            \n           \n            \n        }\n    },\n\n});\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Scan",
  "enabled": 1,
  "modified": "2025-02-16 13:38:22.614916",
  "module": "Upande Kikwetu",
  "name": "Scan Data Field Listener",
  "script": "frappe.ui.form.on('Scan', {\n    refresh(frm) {\n        if (!frm.fields_dict.scan_data.$wrapper.hasClass('scan-data-bound')) {\n            frm.fields_dict.scan_data.$wrapper.on('change', function () {\n                frm.script_manager.trigger('scan_data');\n            });\n\n            frm.fields_dict.scan_data.$wrapper.addClass('scan-data-bound');\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Scan",
  "enabled": 1,
  "modified": "2025-04-06 15:30:56.771194",
  "module": "Upande Kikwetu",
  "name": "Scan Via Honeywell",
  "script": "frappe.ui.form.on('Scan', {\n\trefresh(frm) {\n\t    toggle_scan_data_field(frm);\n\t},\n\t\n\tfarm(frm) {\n\t    toggle_scan_data_field(frm);\n\t},\n\t\n\taction(frm) {\n\t    toggle_scan_data_field(frm);\n\t},\n\t\n\t\n\t\n\tasync scan_data(frm) {\n\t    let audio = new Audio('/assets/upande_kikwetu/sounds/store-scanner-beep-90395.mp3');\n\n\t    let scan_value = frm.doc.scan_data;\n\t    let farm = frm.doc.farm;\n        let action = frm.doc.action;\n        let boxStickerDocId = frm.doc.box_sticker || null;\n\n\n\t    if (scan_value && !frm.is_processing_stock_entry) {\n\t        frm.is_processing_stock_entry = true;\n\t        frm.set_df_property('scan_data', 'read_only', 1);\n\n\t        if (action === 'Packing') {\n\t            if (!frm.doc.opl_data) {\n\t               // Check if scan_value is the opl url\n\t               if (scan_value.includes('order-pick-list')) {\n\t                   \n\t                    frm.set_value('opl_data', scan_value);\n    \t                const oplId = scan_value.split('/').pop();\n    \t                \n    \t               // Check if opl is cancelled before setting value. \n    \t               // If cancelled throw error \"This OPL is cancelled, Request the updated OPL\"\n                        const oplDoc = await frappe.db.get_doc(\"Order Pick List\", oplId);\n\t                   \n\t                   if (oplDoc.status == 0) {\n    \t                    frappe.throw(\"This Order Pick List is cancelled. Request the updated Order Pick List\")\n    \t                }\n    \t               \n    \t                frm.set_value('order_pick_list', oplId);\n                        audio.play();\n    \t                frappe.msgprint('Order Pick List scanned. Now scan bunch labels.');\n\t               } else {\n\t                    frm.set_df_property('scan_data', 'read_only', 0);\n\t                    frm.set_value('scan_data', '');\n\t                    frappe.throw(\"Please Scan a valid Order Pick List\");\n\t               }\n\t                \n\t                \n\t                frm.set_df_property('scan_data', 'read_only', 0);\n\t                frm.set_value('scan_data', '');\n\n\n\t                frm.is_processing_stock_entry = false;\n\t                \n\t                setTimeout(() => {\n                        frm.save();\n                    }, 50);\n\n                    \n\t            } else {\n\n\t                let bunchLabelData = scan_value;\n\t                try {\n                        await process_bunch_scan(frm.doc.opl_data, bunchLabelData, farm, action, frm, audio);\n                        // frappe.msgprint('Bunch scanned. Scan next bunch or Close Box');\n                        frm.set_df_property('scan_data', 'read_only', 0);\n                        frm.set_value('scan_data', '');\n                    } catch (error) {\n                        if (error.message.toLowerCase.includes(\"this bunch has not been graded on the system\")) {\n                            console.log(error.message);\n                        } else {\n                            frappe.msgprint(`Error processing bunch scan: ${error.message}`);\n                        }\n                        \n                    }\n\t                \n                    frm.set_df_property('scan_data', 'read_only', 0);\n\t                frm.set_value('scan_data', '');\n\t                frm.is_processing_stock_entry = false;\n\t            }\n\t           \n\t            \n\t        } else if (action === 'Grading') {\n\t            // Start with fetching the grader's name.\n\t            //If it is not a grader label and it's the first scan(grader field is not populated), throw error telling user to scan grader label first.\n\t            const data = JSON.parse(scan_value);\n\t            const bunchLabelData = data;\n\t            \n\t            if (!frm.doc.grader) {\n\t               if (!data.grader ) {\n    \t               frappe.throw(\"Please scan the Grader label first!\");\n    \t           }\n    \t           \n    \t            //Store the grader in the grader field\n\t                frm.set_value('grader', data.grader);\n\t                audio.play();\n\t                frappe.msgprint('Grader Label scanned. Now scan bunch labels.');\n                    frm.set_df_property('scan_data', 'read_only', 0);\n                    frm.set_value('scan_data', '');\n    \n    \n                    frm.is_processing_stock_entry = false;\n                    \n                    setTimeout(() => {\n                        frm.save();\n                    }, 250);\n                    \n    \t           \n\t            } else {\n\t                \n\t                \n                    try {\n                        await process_grading_bunch_scan(bunchLabelData, farm, action, frm, audio);\n                        frappe.msgprint(`Bunch scanned successfully. Scan next bunch belonging to ${frm.doc.graders_name}!`);\n                        frm.set_df_property('scan_data', 'read_only', 0);\n                        frm.set_value('scan_data', '');\n                    } catch (error) {\n                        \n                        if (error.message.includes('Bunch has already been scanned.')) {\n                            console.log('Bunch already scanned');\n                        } else {\n                            frappe.msgprint(`Error processing bunch scan: ${error.message}`);\n                        }\n                        \n                        \n                        \n                    }\n\t                \n                    frm.set_df_property('scan_data', 'read_only', 0);\n\t                frm.set_value('scan_data', '');\n\t                frm.is_processing_stock_entry = false;\n\t                \n\t                setTimeout(() => {\n                        frm.save();\n                    }, 250);\n\t            }\n\t           \n\t           \n\t            \n\t        } else if (action === 'Receiving') {\n                trigger_stock_entry(scan_value, farm, action, audio).finally(() => {\n                    frm.set_df_property('scan_data', 'read_only', 0);\n                    frm.set_value('scan_data', '');\n                    frm.is_processing_stock_entry = false;\n                    setTimeout(() => {\n                        frm.save();\n                    }, 250);\n                });\n            } else if (action === 'Receiving Quarantined') {\n                await trigger_stock_entry(scan_value, farm, action).finally(() => {\n                    frm.set_df_property('scan_data', 'read_only', 0);\n                    frm.set_value('scan_data', '');\n                    frm.is_processing_stock_entry = false;\n                });\n                \n            } else if (action === 'Grading Check') {\n                // let stockEntryName;\n                // let scan_check_doc;\n\n                // if (!frm.doc.checking_label) {\n                //     scan_check_doc = frappe.model.get_new_doc('Scan Check');\n                    \n                //     frm.doc.scan_check_id = scan_check_doc.name;\n                    \n                //     frappe.msgprint(`Created Scan Check: ${scan_check_doc.name}`);\n                    \n                //     frm.doc.checking_label = 1;\n                //     await frm.save();\n                    \n                // }\n                \n                // scan_check_doc = await frappe.db.get_doc('Scan Check', frm.doc.scan_check_id)\n                \n                let variety, qty, grower, uom, harvester, greenhouse, block__bed_number, stockEntryDoc, items,\n                    stem_length, graded_by, bunched_by;\n                    \n                if ( scan_value.includes(\"farm\") && scan_value.includes(\"variety\") ) {\n                    \n                    const bunchData = JSON.parse(scan_value);\n    \n                    const existingEntries = await frappe.db.get_list('Stock Entry', {\n                        fields: ['name', 'custom_bunch_id'],\n                        filters: {\n                            custom_bunch_id: bunchData.bunch_id\n                        },\n                        limit: 1\n                    });\n                    \n                    if (existingEntries.length === 0) {\n                        frappe.msgprint(\"Bunch Status: NOT GRADED\");\n                    } else {\n                        audio.play();\n                        frappe.msgprint(\"Bunch Status: GRADED\");\n                    }\n                \n                // This is grading qr code data\n                // if ( scan_value.includes(\"farm\") && scan_value.includes(\"variety\") ) {\n                    \n                //     const bunchData = JSON.parse(scan_value);\n    \n                //     const existingEntries = await frappe.db.get_list('Stock Entry', {\n                //         fields: ['name', 'custom_bunch_id'],\n                //         filters: {\n                //             custom_bunch_id: bunchData.bunch_id\n                //         },\n                //         limit: 1\n                //     });\n                    \n                //     let check = {};\n                    \n                //     if (existingEntries.length === 0) {\n                //         frappe.msgprint(\"Bunch Status: NOT GRADED\");\n                        \n                        \n                        \n                        // const checked_row = scan_check_doc.checked_items.find((row) => {\n                        //     row.action === \"Grading Check\" &&\n                        //     row.status === \"NOT GRADED\"\n                        // })\n                        \n                        // if (checked_row) {\n                        //     check = {\n                        //         qty: checked_row.qty + 1\n                        //     }\n                        // } else {\n                        //     check = {\n                        //         action: action,\n                        //         status: \"NOT GRADED\",\n                        //         qty: 1\n                        //     }\n                            \n                        // }\n                        \n                        // scan_check_doc.add_child('checked_items', check)\n                        \n                        \n                    // } else {\n                    //     frappe.msgprint(\"Bunch Status: GRADED\");\n                        \n                        // const checked_row = scan_check_doc.checked_items.find((row) => {\n                        //     row.action === \"Grading Check\" &&\n                        //     row.status === \"GRADED\"\n                        // })\n                        \n                        // if (checked_row) {\n                        //     check = {\n                        //         qty: checked_row.qty + 1\n                        //     }\n                        // } else {\n                        //     check = {\n                        //         action: action,\n                        //         status: \"GRADED\",\n                        //         qty: 1\n                        //     }\n                            \n                        // }\n                        \n                        // scan_check_doc.add_child('checked_items', check)\n                    // }\n                    \n                    \n                // This is harvesting qr code data\n                } else if (scan_value.startsWith('BUCKET')) {\n                    \n                    // frappe.msgprint(`Harvester: ${harvester}, Greenhouse: ${greenhouse}, Bay: ${block__bed_number}, Variety: ${variety}, No. of Stems: ${qty} `);\n                }\n                \n                \n            \n                frm.set_df_property('scan_data', 'read_only', 0);\n                frm.set_value('scan_data', '');\n                frm.is_processing_stock_entry = false;\n                \n                \n                \n                setTimeout(() => {\n                    frm.save();\n                }, 1000);\n                \n            } \n\t    }\n\t}\n\t\n});\n\nasync function process_grading_bunch_scan(bunchLabelData, farm, action, frm, audio) {\n    \n    try {\n        // Get the stock entry with the bunch Id\n        // Check if bunch is scanned via the custom_scanned_grading field\n        const existingEntry = await frappe.db.get_list('Stock Entry', {\n            fields: ['name', 'custom_scanned_grading'],\n            filters: {\n                custom_bunch_id: bunchLabelData.bunch_id\n            },\n            limit: 1\n        });\n        \n       \n        // Check if bunch is already scanned\n        if (existingEntry.length > 0 && existingEntry[0].custom_scanned_grading === 1) {\n            frappe.throw('Bunch has already been scanned.');\n            return;\n        }\n        \n        // Create a new stock entry\n        const stockEntry = frappe.model.get_new_doc('Stock Entry');\n\n        stockEntry.stock_entry_type = 'Grading';\n        \n        stockEntry.from_warehouse = `${farm} Receiving Cold Store - TL`;\n        \n        // Temporary for a week\n        stockEntry.to_warehouse = `${farm} Available for Sale - TL`;\n        stockEntry.custom_farm = farm;\n        stockEntry.custom_graded_by = frm.doc.grader;\n        stockEntry.custom_stem_length = bunchLabelData.stem_length;\n        stockEntry.custom_bunched_by = bunchLabelData.bunch_size;\n        stockEntry.custom_bunch_id = bunchLabelData.bunch_id;\n        stockEntry.custom_scanned_grading = 1;\n\n        stockEntry.items = [{\n            item_code: bunchLabelData.variety,\n            uom: bunchLabelData.bunch_size,\n            qty: 1\n        }];\n\n        await frappe.db.insert(stockEntry);\n        audio.play();\n        frappe.msgprint('Stock transfered successfully.');\n    } catch (error) {\n\n        frappe.throw(__('Error creating Stock Entry: ') + error.message);\n        \n        \n    }\n    \n}\n\nlet farmPackListDocId = null;\n\n\n\nfunction getNameFromUrl(url) {\n    const urlArray = url.split(\"/\");\n    const arrayLength = urlArray.length;\n    const name = urlArray[arrayLength - 1];\n    \n    return name;\n}\n\n\n\nasync function trigger_stock_entry(scan_value, farm, action, audio) {\n    await createStockEntry(scan_value, farm, action, audio);\n    if (action === 'Receiving') {\n        frappe.msgprint(`Received Bucket and Created Stock Entry successfully`);\n        frappe.msgprint(``)\n    } else if (action === 'Receiving Quarantined') {\n        frappe.msgprint(`Received and moved Bucket to quarantine`);\n    }\n    \n}\n\n\n\nasync function process_bunch_scan(opl_url, bunchLabelData, farm, action, frm, audio) {\n        \n    const oplName = getNameFromUrl(opl_url);\n    \n    const bunchData = JSON.parse(bunchLabelData)\n    \n    const existingEntries = await frappe.db.get_list('Stock Entry', {\n        fields: ['name', 'custom_bunch_id'],\n        filters: {\n            custom_bunch_id: bunchData.bunch_id\n        },\n        limit: 1\n    });\n\n    // If no matching stock entry is found\n    if (existingEntries.length === 0) {\n        frappe.throw(`This bunch has not been graded in the system. Perform the grading scan on it to enable packing: ${bunchData.bunch_id}`);\n    }\n    const bunchStockEntryName = existingEntries[0].name;\n    const stockEntryUrl = `/app/stock-entry/${bunchStockEntryName}`;\n    let bunchName;\n    let previouslyScannedItems;\n    let previously_scanned_items_list\n    \n    let totalBunches = 0;\n    let scannedBunches = 0;\n    \n    let stockEntryDoc;\n    \n    \n    // try {\n    //     stockEntryDoc = await frappe.db.get_doc('Stock Entry', bunchStockEntryName);\n    // } catch (error) {\n    //     frappe.throw(`Failed to fetch Stock Entry: ${error}`);\n    // }\n    \n    // if (stockEntryDoc.custom_scanned ) {\n    //     frappe.throw(\"Bunch aready scanned!\");\n    //     return;\n    // }\n    \n    // frappe.call({\n    //     method: \"upande_kikwetu.server_scripts.update_custom_scanned.update_custom_scanned\",\n    //     args: { stock_entry_name: stockEntryName }\n    // });\n    \n    // returns an object with total items and scanned items\n    let varietyMatch = {};\n    \n    \n    try {\n        varietyMatch = await validateLabels(oplName, bunchLabelData, previouslyScannedItems, frm);\n        bunchName = bunchData.variety;\n        \n        if (!varietyMatch.valid) {\n            frappe.throw(`${bunchName} does not match the Order Pick List!`);\n        }\n    } catch (error) {\n        frappe.throw(`Error validating labels: ${error}`);\n        return;\n    }\n    \n    const box_id = varietyMatch.box_number;\n\n    \n    // try {\n    //     await createStockEntry(bunchStockEntryName, farm, action, audio);\n        \n    //     frappe.msgprint(`Transfered stock successfully`);\n    // } catch (error) {\n    //     frappe.throw(`Error creating stock entry: ${error}`);\n    // }\n    \n\n    // Add bunch detail to scanned_items child table\n    const newBunchDetails = {\n        variety: bunchData.variety,\n        bunch_size: bunchData.bunch_size,\n        number_of_bunches: 1,\n    };\n    \n\n    // previously_scanned_items_list is the items scanned for this current box so get it from fpl according to the box id\n    \n    // const scannedItems = previously_scanned_items_list.reduce((sum, row) => {\n    //     return sum + (row.qty || 0)\n    // }, 1)\n    \n    totalBunches = frm.doc.total_bunches;\n    totalScanned = varietyMatch.scannedItems + 1;\n    \n    frm.set_value('scanned_bunches', totalScanned);\n    frappe.msgprint(`${totalScanned} of ${totalBunches} scanned`)\n    \n    // if (!boxStickerDocId) {\n    //     await createBoxSticker(oplName, bunchStockEntryName, frm);\n    // } else {\n\n    //     await addVarietyToBoxSticker(boxStickerDocId, bunchStockEntryName);\n    // }\n    \n    \n    await createOrGetFarmPackList(oplName, bunchStockEntryName, box_id);\n    audio.play();\n    frm.save();\n    \n}\n\n\nasync function createOrGetFarmPackList(oplName, bunchStockEntryName, box_id) {\n\n    const { sales_order, farm } = await getSalesOrderAndFarmFromOPL(oplName);\n    \n    if (!sales_order || farm == \"Unknown\" ) {\n        frappe.throw(\"Sales Order or Warehouse details missing in Order Pick List.\");\n        return;\n    }\n    \n    const existingFPL = await frappe.db.get_list(\"Farm Pack List\", {\n        filters: {\n            custom_sales_order: sales_order,\n            custom_farm: farm\n        },\n        fields: [\"name\", \"docstatus\"]\n        \n    });\n    \n    const isSubmitted = existingFPL.some(fpl => fpl.docstatus === 1);\n    \n    if (isSubmitted) {\n        frappe.throw(\"Farm Pack List already submitted. Check your Order Pick List and scan again\")\n    }\n    \n    if (existingFPL.length > 0) {\n        farmPackListDocId = existingFPL[0].name;\n        await addBunchToFarmPackList(farmPackListDocId, bunchStockEntryName, oplName, farm, box_id);\n        // frappe.msgprint(`Bunch added to existing Farm Pack List: ${farmPackListDocId}`);\n    } else {\n        await createFarmPackListEntry(bunchStockEntryName, oplName, farm, box_id);\n    }\n}\n\n\n\nasync function createFarmPackListEntry(bunchStockEntryName, oplName, farm, box_id) {\n    try {\n        const orderId = oplName;\n        const stockEntryId = bunchStockEntryName;\n        \n        // Fetch Sales Order & Stock Entry\n        const orderPick = await frappe.db.get_doc(\"Order Pick List\", orderId);\n        \n        const stockEntry = await frappe.db.get_doc(\"Stock Entry\", stockEntryId);\n    \n        if (!orderPick || !stockEntry || !stockEntry.items.length) {\n            frappe.throw(\"Invalid Sales Order or Stock Entry data\");\n        }\n    \n        const sourceWarehouse = `${farm} Graded Sold - TL`;\n        \n        const itemCode = stockEntry.items[0].item_code;\n        const uom = stockEntry.items[0].uom;\n        const stem_length = stockEntry.custom_stem_length;\n        \n        // Quantity scanned should always be one per scan\n        const quantity = 1;\n        const customerId = orderPick.customer;\n        const sales_order_id = orderPick.sales_order;\n        \n        // Check the opl for the row that matches the variety \n    \n        \n        \n        const stem_from_bunch = {\n            \"Bunch (5)\": 5,\n            \"Bunch (6)\": 6,\n            \"Bunch (10)\": 10,\n            \"Bunch (12)\": 12,\n            \"Bunch (25)\": 25,\n        } \n        \n        const bunch_stems = stem_from_bunch[uom];\n\n        // Get box id from box label\n        // const boxLabelDoc = await frappe.db.get_doc('Box Label', boxStickerDocId);\n        // const boxId = boxLabelDoc.box_number;\n        \n        // Create new Farm Pack List document\n        const packListDoc = frappe.model.get_new_doc(\"Farm Pack List\");\n        packListDoc.custom_sales_order = sales_order_id;\n        packListDoc.custom_farm = farm;\n        packListDoc.pack_list_item = [{\n            item_code: itemCode,\n            bunch_uom: uom,\n            bunch_qty: quantity,\n            source_warehouse: sourceWarehouse,\n            sales_order_id: sales_order_id,\n            customer_id: customerId,\n            custom_number_of_stems: bunch_stems,\n            stem_length: stem_length,\n            box_id: box_id,\n        }];\n        \n        // Save document\n        const savedDoc = await frappe.db.insert(packListDoc);\n        \n        farmPackListDocId = savedDoc.name;\n    \n        // frappe.msgprint(\"Farm Pack List entry created successfully!\");\n    } catch (error) {\n        console.error(\"Error saving Farm Pack List:\", error);\n        frappe.throw(`Error saving Farm Pack List: ${error.message}`);\n    }\n    \n} \n\n\n\nasync function addBunchToFarmPackList(farmPackListDocId, bunchStockEntryName, oplName, farm, box_id) {\n    \n    // Get box id from box label\n    // const boxLabelDoc = await frappe.db.get_doc('Box Label', boxStickerDocId);\n    // const boxId = boxLabelDoc.box_number;\n    // If box Id is different from the existing one and variety is same, place it on another row\n    try {\n        await frappe.call({\n            method: 'upande_kikwetu.server_scripts.update_farm_pack_list.add_bunch_to_farm_pack_list',\n            args: {\n                farm_pack_list_doc_id: farmPackListDocId,\n                bunch_SE_name: bunchStockEntryName,\n                opl_name: oplName, \n                farm: farm,\n                box_id: box_id\n            },\n            callback: function (response) {\n                // frappe.msgprint(`Added bunch to Farm Pack List: ${farmPackListDocId}`);\n            }\n        });\n    } catch (error) {\n        console.error('Error adding bunch to Farm Pack List:', error);\n        frappe.throw(`Error adding bunch to Farm Pack List: ${error}`);\n    }\n}\n\n\n\nasync function getSalesOrderAndFarmFromOPL(oplName) {\n    const oplDoc = await frappe.db.get_doc('Order Pick List', oplName);\n    \n    const farmName = oplDoc.locations[0].warehouse?.split(\" \")[0]\n                    || oplDoc.source_warehouse?.split(\" \")[0]\n                    || oplDoc.locations[0].custom_source_warehouse?.split(\" \")[0]\n                    || \"Unknown\";\n                    \n    return {\n        sales_order: oplDoc.sales_order,\n        farm: farmName\n    };\n}\n\nasync function validateLabels(oplName, bunchLabelData, scannedItems, frm) {\n    const { sales_order, farm } = await getSalesOrderAndFarmFromOPL(oplName);\n    let orderPickVariety;\n    let stockEntryUOM;\n    let stockEntryVariety;\n    \n    // Total bunches should be fetched from the OPL row for the variety\n    let totalBunches = 0;\n    let scannedBunches = 0;\n    let box_number = 0;\n    \n    const bunchData = JSON.parse(bunchLabelData);\n    \n    try {\n        stockEntryVariety = bunchData.variety;\n        stockEntryUOM = bunchData.bunch_size;\n    } catch (error) {\n        frappe.throw(`Error fetching bunch data: ${error}`);\n    }\n    \n    const existingFPL = await frappe.db.get_list(\"Farm Pack List\", {\n        filters: {\n            custom_sales_order: sales_order,\n            custom_farm: farm\n        },\n        fields: [\"name\", \"docstatus\"]\n    });\n    \n    const isSubmitted = existingFPL.some(fpl => fpl.docstatus === 1);\n    \n    if (isSubmitted) {\n        frappe.throw(\"Farm Pack List already submitted. Check your Order Pick List and scan again\");\n    }\n    \n    try {\n        const orderPickList = await frappe.db.get_doc(\"Order Pick List\", oplName);\n        \n        if (!orderPickList || !orderPickList.locations || orderPickList.locations.length === 0) {\n            frappe.msgprint(`No valid Order Pick List found for ${oplName}`);\n            return { totalItems: 0, scannedItems: 0, valid: false };\n        }\n        \n        totalBunches = orderPickList.locations.reduce((sum, row) => {\n            return sum + (row.qty || 0);\n        }, 0);\n        \n        frm.set_value('total_bunches', totalBunches);\n        \n        // Find matching rows in OPL for the scanned variety and UOM\n        const matchingOPLRows = orderPickList.locations.filter(row => \n            row.item_code === stockEntryVariety && row.uom === stockEntryUOM\n        );\n        \n        if (matchingOPLRows.length === 0) {\n            frappe.throw(`No matching variety ${stockEntryVariety} with UOM ${stockEntryUOM} found in Order Pick List`);\n            return { totalItems: 0, scannedItems: 0, valid: false };\n        }\n        \n        // Initialize box_id with null to ensure we explicitly set it\n        let box_id = null;\n        \n        if (!existingFPL.length) {\n            // If no existing FPL, use the first matching OPL row's box_id\n            box_id = matchingOPLRows[0].custom_box_id;\n        } else {\n            // Get the FPL document\n            const fplDoc = await frappe.db.get_doc(\"Farm Pack List\", existingFPL[0].name);\n            const fplTable = fplDoc.pack_list_item || [];\n            \n            // Track scanned bunches for each box of this variety+UOM\n            const boxScannedCounts = {};\n            \n            // Count bunches already scanned for each box\n            fplTable.forEach(fplRow => {\n                if (fplRow.item_code === stockEntryVariety && fplRow.bunch_uom === stockEntryUOM) {\n                    const boxKey = fplRow.box_id.toString();\n                    boxScannedCounts[boxKey] = (boxScannedCounts[boxKey] || 0) + fplRow.bunch_qty;\n                }\n            });\n            \n            // Find the first box that isn't full\n            for (const oplRow of matchingOPLRows) {\n                const boxKey = oplRow.custom_box_id.toString();\n                const scannedForBox = boxScannedCounts[boxKey] || 0;\n                \n                // If this box has fewer scanned bunches than required\n                if (scannedForBox < oplRow.qty) {\n                    box_id = oplRow.custom_box_id;\n                    break;\n                }\n            }\n            \n            // If all boxes are full or no box was found\n            if (box_id === null && matchingOPLRows.length > 0) {\n                frappe.msgprint(`All boxes for ${stockEntryVariety} with UOM ${stockEntryUOM} are full.`);\n                // Use the last box as fallback\n                box_id = matchingOPLRows[matchingOPLRows.length - 1].custom_box_id;\n            }\n            \n            // Calculate total scanned bunches\n            fplTable.forEach(row => {\n                scannedBunches += row.bunch_qty;\n            });\n            \n            // Check if all required bunches for this variety are already scanned\n            const requiredBunchesForVariety = matchingOPLRows.reduce((sum, row) => sum + (row.qty || 0), 0);\n            const scannedBunchesForVariety = fplTable\n                .filter(row => row.item_code === stockEntryVariety && row.bunch_uom === stockEntryUOM)\n                .reduce((sum, row) => sum + (row.bunch_qty || 0), 0);\n                \n            if (scannedBunchesForVariety >= requiredBunchesForVariety) {\n                frappe.msgprint(`Excess ${stockEntryVariety} scanned for this order`);\n                return { totalItems: totalBunches, scannedItems: scannedBunches, valid: false };\n            }\n        }\n        \n        // Verify the scanned variety matches an expected variety in OPL\n        for (let i = 0; i < orderPickList.locations.length; i++) {\n            let currVariety = orderPickList.locations[i].item_code;\n            let currUOM = orderPickList.locations[i].uom;\n            \n            if (currVariety === stockEntryVariety) {\n                orderPickVariety = currVariety;\n                \n                if (currUOM !== stockEntryUOM) {\n                    frappe.throw(`Scanned wrong bunch size ${currVariety}: Expected ${currUOM}, but scanned ${stockEntryUOM}`);\n                }\n            }\n        }\n        \n        // Make sure box_id is always set\n        if (box_id === null) {\n            frappe.throw(`Could not determine appropriate box ID for ${stockEntryVariety}`);\n            return { totalItems: totalBunches, scannedItems: scannedBunches, valid: false };\n        }\n        \n        // Set box_number to the determined box_id\n        box_number = box_id;\n        \n    } catch (error) {\n        frappe.throw(`Error processing data: ${error}`);\n    }\n    \n    return {\n        totalItems: totalBunches,\n        scannedItems: scannedBunches,\n        box_number: box_number,\n        valid: orderPickVariety === stockEntryVariety\n    };\n}\n\n\n\nfunction toggle_scan_data_field(frm) {\n    if (frm.doc.farm && frm.doc.action) {\n        frm.set_df_property('scan_data', 'hidden', 0);\n        \n        setTimeout(() => {\n            frm.fields_dict.scan_data.$wrapper.find('input').focus();\n        }, 300);\n\n    } else {\n        frm.set_df_property('scan_data', 'hidden', 1);\n    }\n}\n\n\n\nasync function createStockEntry(scan_value, farm, action, audio) {\n    \n    \n\n    let variety;\n    let qty;\n    let grower;\n    let uom;\n    let harvester;\n    let greenhouse;\n    let block__bed_number;\n    let stockEntryDoc;\n    \n    // Use the stockEntryName to get the stock_entry_data field data needed for\n    // stock transfer\n    if (action == \"Receiving\") {\n        try {\n            const { bucket_id } = JSON.parse(scan_value);\n            \n            const stockEntries = await frappe.db.get_list('Stock Entry', {\n               filters: {\n                   'custom_bucket_id': bucket_id,\n                   'docstatus': 1\n               },\n               fields: ['name', 'custom_scanned', 'custom_greenhouse', 'custom_harvester', 'custom_block__bed_number', 'items']\n            });\n            \n            if (stockEntries.length === 0) {\n                frappe.throw(`No Stock Entry found for bucket_id: ${bucket_id}`);\n                return;\n            }\n            \n            const stockEntryDoc = await frappe.db.get_doc('Stock Entry', stockEntries[0].name);\n            \n            if (stockEntryDoc.custom_scanned ) {\n                frappe.throw(\"Bucket already scanned!\");\n                \n                return;\n            }\n            \n            frappe.call({\n                method: \"upande_kikwetu.server_scripts.update_custom_scanned.update_custom_scanned\",\n                args: { stock_entry_name: stockEntryDoc.name }\n            });\n            \n            const items = stockEntryDoc.items;\n            greenhouse = stockEntryDoc.custom_greenhouse;\n            harvester = stockEntryDoc.custom_harvester_payroll_number;\n            block__bed_number = stockEntryDoc.custom_block__bed_number;\n    \n            \n            if (Array.isArray(items) && items.length > 0) {\n                variety = items[0].item_code;\n                qty = items[0].qty;\n            }\n            \n            audio.play();\n            frappe.msgprint(`Harvester: ${harvester}, Greenhouse: ${greenhouse}, Bay: ${block__bed_number}, No. of Stems: ${qty} `)\n           \n        } catch (error) {\n            if (error.includes(\"Bucket already scanned!\")) {\n                console.log(error);\n            }\n            frappe.throw(`Failed to fetch Stock Entry: ${error}`);\n        }\n        \n        \n    }\n    \n    if (action === \"Packing\") {\n        const stockEntryName = scan_value;\n        \n        try {\n            stockEntryDoc = await frappe.db.get_doc('Stock Entry', stockEntryName);\n\n        } catch (error) {\n            frappe.throw(`Failed to fetch Stock Entry: ${error}`);\n        }\n        \n        const items = stockEntryDoc.items;\n        \n        items.forEach((item) => {\n            variety = item.item_code;\n            \n            // Flowers are packed per 1 bunch\n            qty = 1;\n            uom = item.uom;\n        });\n        \n\n    }\n    \n    if (action === 'Receiving Quarantined') {\n        try {\n            const { bucket_id } = JSON.parse(scan_value);\n            \n            const stockEntries = await frappe.db.get_list('Stock Entry', {\n               filters: {\n                   'custom_bucket_id': bucket_id,\n                   'docstatus': 1\n               },\n               fields: ['name', 'custom_scanned', 'custom_greenhouse', 'custom_harvester', 'custom_block__bed_number', 'items']\n            });\n            \n            if (stockEntries.length === 0) {\n                frappe.throw(`No Stock Entry found for bucket_id: ${bucket_id}`);\n                return;\n            }\n            \n            const stockEntryDoc = await frappe.db.get_doc('Stock Entry', stockEntries[0].name);\n            \n            if (stockEntryDoc.custom_scanned ) {\n                frappe.throw(\"Bucket already scanned!\");\n                return;\n            }\n            \n            const items = stockEntryDoc.items;\n        \n            greenhouse = stockEntryDoc.custom_greenhouse;\n            harvester = stockEntryDoc.custom_harvester;\n            block__bed_number = stockEntryDoc.custom_block__bed_number;\n    \n            if (Array.isArray(items) && items.length > 0) {\n                variety = items[0].item_code;\n                qty = items[0].qty;\n            }\n            \n            audio.play();\n            frappe.msgprint(`Harvester: ${harvester}, Greenhouse: ${greenhouse}, Bay: ${block__bed_number}, No. of Stems: ${qty} `)\n            \n            \n            frappe.call({\n                method: \"upande_kikwetu.server_scripts.update_custom_scanned.update_custom_scanned\",\n                args: { stock_entry_name: stockEntryDoc.name }\n            });\n            \n        } catch (error) {\n            if (error.includes(\"Bucket already scanned!\")) {\n                console.log(error);\n            }\n            \n            frappe.throw(`Failed to fetch Stock Entry: ${error}`);\n        }\n        \n        \n    }\n    \n    const stock_entry_type_mapping = {\n        \"Receiving\": \"Receiving\",\n        \"Packing\": \"Packing\",\n        \"Receiving Quarantined\": \"Receiving Quarantined\",\n    };\n    \n    const stock_entry_type = stock_entry_type_mapping[action];\n    \n    // Change the mapping of the location to check the location doctype \n    const locationMapping = {\n        \"Burguret Receiving\": { source: `${greenhouse}`, target: \"Burguret Receiving Cold Store - TL\" },\n        \"Burguret Receiving Quarantined\": { source: `${greenhouse}`, target: \"Burguret Quarantine Store - TL\" },\n        \"Burguret Packing\": { source: \"Burguret Graded Sold - TL\", target: \"Delivery Truck - TL\" },\n\n        \"Turaco Receiving\": { source: `${greenhouse}`, target: \"Turaco Receiving Cold Store - TL\" },\n        \"Turaco Receiving Quarantined\": { source: `${greenhouse}`, target: \"Turaco Quarantine Store - TL\" },\n        \"Turaco Packing\": { source: \"Turaco Graded Sold - TL\", target: \"Delivery Truck - TL\" },\n\n        \"Pendekeza Receiving\": { source: `${greenhouse}`, target: \"Pendekeza Receiving Cold Store - TL\" },\n        \"Pendekeza Receiving Quarantined\": { source: `${greenhouse}`, target: \"Pendekeza Quarantine Store - TL\" },\n        \"Pendekeza Packing\": { source: \"Pendekeza Graded Sold - TL\", target: \"Delivery Truck - TL\" }\n    };\n    \n    const scanLocation = `${farm} ${action}`;\n    \n    const stockmvt = locationMapping[scanLocation];\n\n    if (!stockmvt) {\n        frappe.msgprint(`Invalid scan location: ${scanLocation}`);\n        return;\n    }\n    stock_entry_data = {\n        \"location data\": stockmvt,\n        \"variety\": variety,\n        \"quantity\": qty,\n        \"grower\": grower,\n        \"harvester\": harvester,\n        \"greenhouse\": greenhouse,\n        \"stock entry type\": stock_entry_type,\n        \"uom\": uom,\n        \"block__bed_number\": block__bed_number\n    };\n    \n    \n\n    const created_stock_entry = frappe.call({\n        method: \"upande_kikwetu.server_scripts.create_stock_entry.create_stock_entry\",\n        args: {\n            stock_entry_data: JSON.stringify(stock_entry_data),\n        }\n    });\n\n    return created_stock_entry;\n\n}\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Scan",
  "enabled": 1,
  "modified": "2025-02-26 08:46:32.942181",
  "module": "Upande Kikwetu",
  "name": "Close Box Button",
  "script": "frappe.ui.form.on('Scan', {\n\trefresh: function(frm) {\n        update_primary_action(frm);\n        toggle_order_pick_list(frm)\n    },\n\n    action: function(frm) {\n        update_primary_action(frm);\n        toggle_order_pick_list(frm)\n    },\n\n    farm: function(frm) {\n        update_primary_action(frm);\n    },\n    \n    opl_data: function(frm) {\n        update_primary_action(frm);\n    },\n    \n    scan_data: function(frm) {\n        update_primary_action(frm);\n    }\n});\n\n\nfunction toggle_order_pick_list(frm) {\n    frm.toggle_display('order_pick_list', frm.doc.action === 'Packing');\n    frm.toggle_display('status', frm.doc.action === 'Packing');\n}\n\n\nfunction update_primary_action(frm) {\n    // if (frm.doc.status === 'Paused') {\n    //     frm.page.set_secondary_action('Resume Scan', function() {\n    //         frm.save().then(() => {\n    //             update_primary_action(frm);\n    //         });\n    //     });\n    // }\n    \n    if (frm.doc.action === 'Packing') {\n        if (frm.doc.status === 'Paused') {\n            frm.page.set_primary_action('Close Box', function() {\n                frm.set_value('status', 'Closed');\n                saveDoc(frm); \n            });\n        } else if (frm.doc.__unsaved) {\n            frm.page.set_primary_action('Pause Box', function() {\n                frm.set_value('status', 'Paused');\n                frm.save().then(() => {\n                    update_primary_action(frm);\n                });\n            });\n        } else {\n            frm.page.set_primary_action('Pause Box', function() {\n                frm.set_value('status', 'Paused');\n                frm.save().then(() => {\n                    update_primary_action(frm);\n                });\n            });\n        }\n            \n    } else {\n        frm.page.set_primary_action(__('Save'), function() {\n            frm.save();\n        });\n    }\n}\n\nfunction saveDoc(frm) {\n    frappe.call({\n        method: \"frappe.client.submit\",\n        args: {\n            doc: frm.doc,\n        },\n        callback: function(response) {\n            frappe.msgprint(\"Box Closed!\");\n            frm.reload_doc();\n        }\n    });\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Stock Entry",
  "enabled": 0,
  "modified": "2025-03-13 02:53:00.320459",
  "module": "Upande Kikwetu",
  "name": "Transfer Grading Stock",
  "script": "frappe.listview_settings['Stock Entry'] = {\r\n    onload: function(listview) {\r\n        listview.page.add_button('Transfer Graded Stock', () => {\r\n            // Get all stock entries from the list that were created in the last 24 hours\r\n            let selected_entries = listview.data.filter(entry => {\r\n                let entryDate = new Date(entry.creation);\r\n                let last24Hours = new Date();\r\n                last24Hours.setHours(last24Hours.getHours() - 24);\r\n\r\n                return (\r\n                    entry.docstatus === 1 &&\r\n                    entryDate >= last24Hours && \r\n                    [\"Grading\", \"Grading Without Receiving\"].includes(entry.stock_entry_type)\r\n                );\r\n            }).map(entry => entry.name);\r\n            \r\n            if (selected_entries.length === 0) {\r\n                frappe.msgprint(__('No recent graded stock entries found.'));\r\n                return;\r\n            }\r\n\r\n            // Call the API to process the stock transfer\r\n            frappe.call({\r\n                method: \"upande_kikwetu.server_scripts.transfer_graded_stock.transfer_stock\",\r\n                args: { stock_entries: selected_entries },\r\n                freeze: true,\r\n                freeze_message: \"Processing stock transfer...\",\r\n                callback: function(response) {\r\n\r\n                    if (response.message) {\r\n                        frappe.msgprint(`Stock Transfers Created: ${response.message.transferred_entries.join(\", \")}`);\r\n                        listview.refresh();\r\n                    } else {\r\n                        frappe.msgprint(\"Failed to create stock transfers.\");\r\n                    }\r\n                }\r\n            });\r\n\r\n        }, 'Action');\r\n    }\r\n};\r\n",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Harvest",
  "enabled": 1,
  "modified": "2025-03-13 01:51:12.116581",
  "module": "Upande Kikwetu",
  "name": "New Form After Save",
  "script": "frappe.ui.form.on('Harvest', {\n    after_save: function(frm) {\n        frappe.show_alert({message: 'Saved successfully!', indicator: 'green'});\n        \n        // Refresh and open a new form\n        setTimeout(() => {\n            frappe.set_route('Form', frm.doctype, 'new');\n        }, 1000);\n        \n        setTimeout(() => {\n            window.location.reload();\n        }, 1000);\n        \n        \n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Label Print",
  "enabled": 1,
  "modified": "2025-03-19 15:37:52.775509",
  "module": "Upande Kikwetu",
  "name": "Remove Read Only on Field",
  "script": "frappe.ui.form.on('Label Print', {\n\tvariety(frm) {\n\t    if (frm.doc.variety) {\n            frappe.db.get_value('Item', frm.doc.variety, 'sales_uom', (r) => {\n                if (r && r.sales_uom) {\n                    frm.set_value('bunch_size', r.sales_uom);\n                }\n            });\n        }\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Harvest",
  "enabled": 1,
  "modified": "2025-04-06 15:31:21.938927",
  "module": "Upande Kikwetu",
  "name": "Ensure Bucket Is Scanned On Save",
  "script": "frappe.ui.form.on('Harvest', {\n\tbefore_save(frm) {\n\t    if (frm.doc.quantity > 70 ) {\n\t        frappe.throw('Quantity in bucket cannot be more than 70 stems.');\n\t    }\n\t\tif (!frm.doc.bucket_id) {\n\t\t    frappe.throw(\"Please Refresh and scan the bucket QR Code before saving!\");\n\t\t    \n\t\t    \n\t\t    setTimeout(() => {\n                frappe.set_route('Form', frm.doctype, 'new');\n            }, 4000);\n            \n            setTimeout(() => {\n                window.location.reload();\n            }, 1000);\n\t\t}\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Bunch QR Code",
  "enabled": 1,
  "modified": "2025-03-27 09:34:45.545382",
  "module": "Upande Kikwetu",
  "name": "Hide Filter Button",
  "script": "frappe.listview_settings[\"Bunch QR Code\"] = {\n    onload(listview) {\n        setTimeout(() => {\n            let filter_button = $(\".filter-section .filter-selector\");\n\n            if (filter_button.length) {\n                filter_button.hide();\n            }\n        }, 500);\n        \n    }\n};",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Label Print",
  "enabled": 1,
  "modified": "2025-03-28 14:14:07.299189",
  "module": "Upande Kikwetu",
  "name": "Grading Traceability Symbols",
  "script": "frappe.ui.form.on('Label Print', {\n\trefresh(frm) {\n\t    let creation_date = frappe.datetime.now_date();\n\t    let date_obj = new Date(creation_date);\n\t    let day_index = date_obj.getDay();\n\t    \n\t    const days_of_week = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n\t    const sign = [\"+\", \"#\", \"@\", \"*\", \"$\", \"%\", \"&\"];\n\t    \n\t    let day_of_week = days_of_week[day_index];\n\t    let day_sign = sign[day_index];\n\t    \n\t    \n\t    frm.set_value(\"day_code\", day_sign);\n\t\t    \n\t}\n});",
  "view": "Form"
 }
]