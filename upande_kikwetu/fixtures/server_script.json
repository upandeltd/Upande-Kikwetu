[
 {
  "allow_guest": 0,
  "api_method": "get_item_group_price",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-04-15 11:27:29.863807",
  "module": "Upande Kikwetu",
  "name": "Amount Calc Based on IGP",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": null,
  "script": "\nitem_group = frappe.form_dict.get(\"item_group\")\nlength = frappe.form_dict.get(\"length\")\ncurrency = frappe.form_dict.get(\"currency\")\n\nif not item_group or not length or not currency:\n    frappe.response[\"message\"] = \"Missing required parameters\"\nelse:\n    price_doc = frappe.db.get_value(\n        \"Item Group Price\",\n        {\"item_group\": item_group, \"length\": length, \"currency\": currency},\n        \"price_list_rate\"\n    )\n\n    frappe.response[\"message\"] = price_doc if price_doc else None\n",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-03-11 10:54:18.828871",
  "module": "Upande Kikwetu",
  "name": "Stock Entry Script",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Stock Entry",
  "script": "if (doc.stock_entry_type == \"Harvesting\") or (doc.stock_entry_type == \"Receiving\") or (doc.stock_entry_type == \"Grading\"):\n    doc.submit()\n    ",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-02-14 01:15:16.702691",
  "module": "Upande Kikwetu",
  "name": "Stock Entry After Save",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Stock Entry",
  "script": "if doc.stock_entry_type == \"Grading\":\n    name = doc.name\n    \n    if frappe.db.exists(\"QR Code\", name):\n        frappe.delete_doc(\"QR Code\", name)\n    \n    if doc.custom_bunch_qr_code:\n        qr_code_doc = frappe.get_doc({\n            \"doctype\": \"QR Code\",  \n            \"stock_entry\": doc.name,\n            \"qr_code_image\": doc.custom_bunch_qr_code,  \n        })\n        qr_code_doc.insert()\n        \n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-03-24 12:22:22.737541",
  "module": "Upande Kikwetu",
  "name": "Harvest Stock Entry",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Harvest",
  "script": "stock_entry = frappe.new_doc(\"Stock Entry\")\n\nstock_entry.stock_entry_type = \"Harvesting\"\nstock_entry.custom_farm = doc.farm\nstock_entry.custom_greenhouse = doc.block or doc.blck or doc.bck\nstock_entry.custom_block__bed_number = doc.bay\nstock_entry.custom_harvester = doc.harvester\nstock_entry.custom_bucket_id = doc.bucket_id\nstock_entry.to_warehouse = doc.block or doc.blck or doc.bck\n\nstock_entry.append(\"items\", {\n    \n    \"item_code\": doc.item_code,\n    \"qty\": doc.quantity\n})\n\nstock_entry.insert()\nstock_entry.submit()\n\nfrappe.msgprint(f\"Stock Entry {stock_entry.name} created successfully.\")",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Submit",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-03-26 16:23:28.541728",
  "module": "Upande Kikwetu",
  "name": "Automate Rejects Material Issue",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Stock Entry",
  "script": "if (doc.stock_entry_type == \"Field Rejects\"):\n    farm = doc.custom_farm\n    items = []\n    for item in doc.items:\n        item_dict = {\n            \"item_code\": item.item_code,\n            \"qty\": item.qty,\n            \"s_warehouse\": None,\n            \"t_warehouse\": item.t_warehouse,\n            \"custom_rejection_reason\": item.custom_rejection_reason,\n            \"custom_bay\": item.custom_bay\n        }\n        \n        items.append(item_dict)\n        \n    \n    if items:\n        material_issue = frappe.get_doc({\n            \"doctype\": \"Stock Entry\",\n            \"stock_entry_type\": \"Material Issue\",\n            \"custom_farm\": farm,\n            \"items\": []\n        })\n\n        for item in items:\n            material_issue.append(\"items\", {\n                \"item_code\": item[\"item_code\"],\n                \"qty\": item[\"qty\"],\n                \"s_warehouse\": item[\"t_warehouse\"],\n                \"t_warehouse\": None,\n                \"custom_rejection_reason\": item[\"custom_rejection_reason\"],\n                \"custom_bay\": item[\"custom_bay\"]\n            })\n\n        material_issue.insert()\n        \n        material_issue.set_posting_time = 1 \n        material_issue.posting_date = doc.posting_date\n        material_issue.posting_time = doc.posting_time\n        \n        material_issue.submit()\n        \n        frappe.msgprint(f\"Material Issue Stock Entry {material_issue.name} created successfully.\")\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-04-05 19:19:56.604165",
  "module": "Upande Kikwetu",
  "name": "Create Box Labels",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Farm Pack List",
  "script": "if doc.workflow_state == \"Pending Order Review\" and doc.get_doc_before_save().workflow_state == \"Draft\":\n\n    pack_list_items = doc.pack_list_item\n    sales_order_id = doc.custom_sales_order\n    \n    # Get the farm from the item table of the fpl\n    farm_warehouse = pack_list_items[0].source_warehouse\n    farm = farm_warehouse.split()[0]\n    \n    opl = frappe.db.sql(\"\"\"\n        SELECT p.name \n        FROM `tabOrder Pick List` p\n        JOIN `tabPick List Item` i ON i.parent = p.name\n        WHERE p.sales_order = %s\n        AND i.warehouse = %s\n        AND i.idx = 1\n        LIMIT 1\n    \"\"\", (sales_order_id, f'{farm} Available for Sale - TL'), as_dict=1)\n        \n    \n    sales_order_doc = frappe.get_doc(\n            \"Sales Order\", sales_order_id\n        )\n        \n        \n    if opl:\n        opl_doc = frappe.get_doc(\"Order Pick List\", opl[0].name)\n        \n        \n        \n        for item in pack_list_items:\n            # Check if a box label doc matching the opl used exists,\n            existing_labels = frappe.get_list(\n                    \"Box Label\",\n                    filters = {\n                        \"order_pick_list\": opl_doc.name\n                    }\n                )\n                \n    \n            \n            if not existing_labels:\n                total_stems = 0\n                box_1_items = []    \n                \n                for row in pack_list_items:\n                    if row.box_id == \"1\":\n                        box_1_items.append({\n                            \"item_code\": row.item_code,\n                            \"bunch_uom\": row.bunch_uom,\n                            \"bunch_qty\": row.bunch_qty\n                        })\n                        total_stems = total_stems + row.custom_number_of_stems\n                \n                \n                new_label = frappe.new_doc(\"Box Label\")\n                \n                new_label.customer = doc.custom_customer\n                new_label.box_number = 1\n                new_label.order_pick_list = opl_doc.name\n                new_label.pack_rate = total_stems\n                new_label.date = opl_doc.date_created\n                new_label.customer_purchase_order = sales_order_doc.po_no\n                new_label.consignee = sales_order_doc.custom_consignee\n                new_label.truck_details =  sales_order_doc.custom_truck_details\n                new_label.farm_pack_list_link = doc.name\n                \n                for fpl_item in box_1_items:\n                    new_label.append(\"box_item\", {\n                        \"variety\": fpl_item[\"item_code\"],\n                        \"uom\": fpl_item[\"bunch_uom\"],\n                        \"qty\": fpl_item[\"bunch_qty\"]\n                    })\n                \n                \n                new_label.insert()\n                \n            \n            if existing_labels:\n                # Check the number of box labels existing\n                # Create the next box label (box number = number of existing box labels + 1 )\n                # Filter that box number items in the fpl just like the box_1_items\n                # Next add the details just like box_1 was added.\n                # If there is no next box label, stop\n                existing_box_count = len(existing_labels)\n                box_number = existing_box_count + 1\n                \n                total_stems = 0\n                box_items = []\n                \n                for row in pack_list_items:\n                    if row.box_id == f\"{box_number}\":\n                        box_items.append({\n                            \"item_code\": row.item_code,\n                            \"bunch_uom\": row.bunch_uom,\n                            \"bunch_qty\": row.bunch_qty\n                        })\n                        total_stems = total_stems + row.custom_number_of_stems\n                \n            \n                if len(box_items) > 0:\n    \n                    new_label = frappe.new_doc(\"Box Label\")\n            \n                    new_label.customer = doc.custom_customer\n                    new_label.box_number = box_number\n                    new_label.order_pick_list = opl_doc.name\n                    new_label.pack_rate = total_stems\n                    new_label.date = opl_doc.date_created\n                    new_label.customer_purchase_order = sales_order_doc.po_no\n                    new_label.consignee = sales_order_doc.custom_consignee\n                    new_label.truck_details = sales_order_doc.custom_truck_details\n                    new_label.farm_pack_list_link = doc.name\n                \n                    for fpl_item in box_items:\n                        new_label.append(\"box_item\", {\n                            \"variety\": fpl_item[\"item_code\"],\n                            \"uom\": fpl_item[\"bunch_uom\"],\n                            \"qty\": fpl_item[\"bunch_qty\"]\n                        })\n                        \n                    # Save the new box label\n                    new_label.insert()\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": "create_cpl",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Submit",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-05-07 09:52:55.593684",
  "module": null,
  "name": "Create cpl",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Farm Pack List",
  "script": "if not doc.pack_list_item:\n    frappe.throw(\"No items in Farm Pack List to transfer.\")\n\ntarget_warehouse = \"Goods In Transit - KF\"\n\nif not frappe.db.exists(\"Warehouse\", target_warehouse):\n    frappe.throw(f\"Target Warehouse '{target_warehouse}' does not exist.\")\n\nstock_entry = frappe.new_doc(\"Stock Entry\")\nstock_entry.stock_entry_type = \"Material Transfer\"\nstock_entry.farm_pack_list = doc.name\n\nfor item in doc.pack_list_item:\n    if not item.source_warehouse:\n        frappe.throw(f\"Source Warehouse is missing for item {item.item_code}\")\n    \n    if not frappe.db.exists(\"Warehouse\", item.source_warehouse):\n        frappe.throw(f\"Source Warehouse '{item.source_warehouse}' does not exist.\")\n    \n    stock_entry.append(\"items\", {\n        \"s_warehouse\": item.source_warehouse,\n        \"t_warehouse\": target_warehouse,\n        \"item_code\": item.item_code,\n        \"qty\": item.bunch_qty,\n        \"uom\": item.bunch_uom,\n        \"stock_uom\": item.bunch_uom,\n    })\n\nstock_entry.save(ignore_permissions=True)\nstock_entry.submit()\n\n\nsales_order_id = doc.custom_sales_order\n\nif not sales_order_id:\n    frappe.throw(\"Sales Order ID is required for CPL.\")\n\nexisting_cpl = frappe.get_all(\"Consolidated Pack List\",\n    filters={\"sales_order_id\": sales_order_id},\n    fields=[\"name\"], limit=1)\n\nbox_labels = frappe.get_all(\"Sales Order Item\",\n    filters={\"parent\": sales_order_id},\n    fields=[\"item_code\", \"custom_box_label\"])\n\nbox_label_map = {b.item_code: b.custom_box_label for b in box_labels if b.custom_box_label}\n\nif existing_cpl:\n    cpl = frappe.get_doc(\"Consolidated Pack List\", existing_cpl[0].name)\nelse:\n    cpl = frappe.new_doc(\"Consolidated Pack List\")\n    cpl.sales_order_id = sales_order_id\n    cpl.customer_id = doc.pack_list_item[0].customer_id if doc.pack_list_item else None\n\ncpl.custom_customer = doc.custom_customer\ncpl.custom_currency = doc.custom_currency\ncpl.custom_customer_address = doc.custom_customer_address\n\n# Total stems from previous items\ntotal_stems = 0\nif cpl.get(\"items\"):\n    for i in cpl.items:\n        total_stems = total_stems + (i.custom_number_of_stems or 0)\n\n# Add new items\nfor item in doc.pack_list_item:\n    box_label = box_label_map.get(item.item_code, item.custom_box_label)\n    cpl.append(\"items\", {\n        \"source_warehouse\": \"Goods In Transit - KF\",\n        \"customer_id\": item.customer_id,\n        \"sales_order_id_cpl\": item.sales_order_id,\n        \"box_id\": item.box_id,\n        \"item_code\": item.item_code,\n        \"bunch_uom\": item.bunch_uom,\n        \"bunch_qty\": item.bunch_qty,\n        \"stem_length\": item.stem_length,\n        \"consolidated_pack_list_id\": item.consolidated_pack_list_id,\n        \"custom_number_of_stems\": item.custom_number_of_stems,\n        \"custom_box_label\": box_label\n    })\n    total_stems = total_stems + (item.custom_number_of_stems or 0)\n\n\ncpl.custom_total_stems = total_stems\ncpl.save(ignore_permissions=True)\n# frappe.db.commit()\ndoc.save()\n\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-04-28 07:19:56.634418",
  "module": "Upande Kikwetu",
  "name": "Delivery Note Script",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Material Request",
  "script": "if doc.material_request_type == \"Material Transfer\" and doc.workflow_state == \"Approved by Security Guard\":\n    # Create new Internal Delivery Note\n    idn = frappe.new_doc(\"Internal Delivery Note\")\n    idn.naming_series = \"IDN-.YYYY.-\"\n    idn.from_warehouse = doc.set_from_warehouse  # assuming 'set_warehouse' is your Source Warehouse\n    idn.to_warehouse = doc.set_warehouse     # assuming you have a custom 'to_warehouse' field\n    \n    # Copy Items\n    for item in doc.items:\n        idn.append(\"items\", {\n            \"item_code\": item.item_code,\n            \"item_name\": item.item_name,\n            \"qty\": item.qty,\n            \"uom\": item.uom,\n            \"description\": item.description\n        })\n    \n    # Save and Submit the new Internal Delivery Note\n    idn.insert(ignore_permissions=True)\n    idn.submit()\n    \n    frappe.msgprint(f\"Internal Delivery Note {idn.name} created successfully.\")\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-04-25 17:30:23.844177",
  "module": "Upande Kikwetu",
  "name": "Material Transfer Submit",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Material Request",
  "script": "if doc.material_request_type in [\"Material Issue\"]:\n    if doc.workflow_state in [\"Approved by Farm Manager\", \"Approved by Crop Protection Manager\", \"Approved by Production Manager\"]:\n        # doc.save()\n        doc.submit()",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Submit",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-04-26 11:59:08.173498",
  "module": "Upande Tambuzi",
  "name": "CPL complete percentage tracker",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Consolidated Pack List",
  "script": "def validate(doc, method):\n    if doc.get('sales_order'):\n        try:\n            # Calculate total packed quantity per item_code from Consolidated Pack List\n            packed_quantities = frappe.db.sql(\"\"\"\n                SELECT item.item_code, COALESCE(SUM(item.custom_number_of_stems), 0) as total_qty\n                FROM `tabConsolidated Pack List` cpl\n                INNER JOIN `tabPack List Item` item ON cpl.name = item.parent\n                WHERE cpl.sales_order = %s\n                AND cpl.docstatus < 2\n                GROUP BY item.item_code\n            \"\"\", doc.sales_order, as_dict=1)\n\n            # Calculate total ordered quantity per item_code from Sales Order\n            ordered_quantities = frappe.db.sql(\"\"\"\n                SELECT so_item.item_code, COALESCE(SUM(so_item.qty), 0) as total_qty\n                FROM `tabSales Order Item` so_item\n                INNER JOIN `tabSales Order` so ON so_item.parent = so.name\n                WHERE so.name = %s\n                AND so.docstatus = 1\n                GROUP BY so_item.item_code\n            \"\"\", doc.sales_order, as_dict=1)\n\n            # Match item codes and calculate totals\n            total_packed = 0\n            total_ordered = 0\n            for ordered in ordered_quantities:\n                item_code = ordered.item_code\n                ordered_qty = ordered.total_qty\n                packed_qty = next((p.total_qty for p in packed_quantities if p.item_code == item_code), 0)\n                total_ordered += ordered_qty\n                total_packed += min(packed_qty, ordered_qty)  # Cap packed qty at ordered qty\n\n            frappe.msgprint(_(\"Total Packed Quantity: {}\").format(total_packed))\n            frappe.msgprint(_(\"Total Ordered Quantity: {}\").format(total_ordered))\n\n            # Handle invalid Sales Order data\n            if total_ordered <= 0:\n                frappe.throw(_(\"Sales Order has no valid ordered items. Cannot process Consolidated Pack List.\"))\n            elif total_packed > total_ordered:\n                frappe.throw(_(\"Cannot pack {} units. Sales Order only requires {} units.\").format(total_packed, total_ordered))\n\n            # Calculate completion percentage\n            completion_percentage = 0\n            if total_ordered > 0:\n                completion_percentage = (total_packed / total_ordered) * 100\n                completion_percentage = round(completion_percentage, 2)\n\n            frappe.msgprint(_(\"Calculated completion percentage: {}%\").format(completion_percentage))\n\n            # Update Sales Order\n            final_value = min(completion_percentage, 100)\n            frappe.msgprint(_(\"Attempting to set custom_completion_percentage to: {}%\").format(final_value))\n\n            frappe.db.set_value(\n                \"Sales Order\",\n                doc.sales_order,\n                \"custom_completion_percentage\",\n                final_value\n            )\n\n            # Verify the update\n            updated_value = frappe.db.get_value(\"Sales Order\", doc.sales_order, \"custom_completion_percentage\")\n            frappe.msgprint(_(\"Value after update: {}%\").format(updated_value))\n\n            # Block over-fulfillment\n            if completion_percentage >= 100:\n                frappe.throw(_(\"Packing cannot proceed. 100% of Sales Order has been fulfilled.\"))\n\n        except Exception as e:\n            frappe.msgprint(_(\"Error details: {}\").format(str(e)))\n            frappe.throw(_(\"Sales Order update failed: {}\").format(str(e)))",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-04-25 13:55:15.166441",
  "module": "Upande Tambuzi",
  "name": "FPL Completeness Tracker",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Farm Pack List",
  "script": "if doc.status == \"Draft\":\n    \n    # Completion check\n    packed_stems = int(doc.custom_total_stems or 0)\n    required_stems = int(doc.custom_picked_total_stems or 0)\n    completion_percentage = 0\n\n    if required_stems > 0:\n        completion_percentage = (packed_stems / required_stems) * 100\n        doc.custom_completion_percentage = completion_percentage\n\n    if completion_percentage < 100:\n        message = f\"\"\"\n            <b>This Farm Pack List cannot be sent for review before all ordered stems are packed.</b><br><br>\n            Packed Stems: <b>{packed_stems}</b><br>\n            Required Stems (from Order Pick List): <b>{required_stems}</b><br>\n            Packing Completion: <b>{round(completion_percentage, 2)}%</b><br><br>\n            \"\"\"\n        frappe.throw(message)\n    elif completion_percentage > 100:\n        frappe.throw(\"You have over packed!\")\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-05-07 09:41:57.468973",
  "module": "Upande Tambuzi",
  "name": "fetch stems from opl to fpl",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Farm Pack List",
  "script": "if doc.custom_order_pick_list and not doc.custom_picked_total_stems:\n    opl = frappe.get_doc(\"Order Pick List\", doc.custom_order_pick_list)\n    doc.custom_picked_total_stems = opl.custom_total_stems or 0\n    frappe.msgprint(f\"Fetched {doc.custom_picked_total_stems} stems from Order Pick List.\")\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-05-15 20:22:30.449416",
  "module": null,
  "name": "Packed% on FPL",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Farm Pack List",
  "script": "opl_total = float(doc.get('opl_total_stems') or 0)\ncustom_total = float(doc.get('custom_total_stems') or 0)\n\nif opl_total != 0:\n    packed = (custom_total / opl_total) * 100\nelse:\n    packed = 0\n\ndoc.db_set('packed', packed)\n",
  "script_type": "DocType Event"
 }
]