[
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-05-18 23:48:14.809806",
  "module": "Upande Kikwetu",
  "name": "Credit Limit Alert",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Sales Invoice",
  "script": "credit_limit = frappe.db.get_value(\"Customer Credit Limit\", {\n    \"parent\": doc.customer,\n    \"company\": doc.company\n}, \"credit_limit\")\n\nif credit_limit:\n    outstanding_invoices = frappe.get_all(\"Sales Invoice\",\n                                          filters={\n                                              \"customer\": doc.customer,\n                                              \"company\": doc.company,\n                                              \"docstatus\": 1,\n                                              \"outstanding_amount\": [\">\", 0]\n                                          },\n                                          fields=[\n                                              \"name\", \"outstanding_amount\", \"conversion_rate\"]\n                                          )\n\n    total_outstanding_kes = sum(\n        (float(inv.outstanding_amount or 0) * float(inv.conversion_rate or 1)) for inv in outstanding_invoices\n    )\n\n    current_invoice_kes = float(\n        doc.grand_total or 0) * float(doc.conversion_rate or 1)\n    projected_outstanding_kes = total_outstanding_kes + current_invoice_kes\n\n    threshold = 0.7 * float(credit_limit)\n\n    if projected_outstanding_kes > threshold:\n        frappe.msgprint(\n            _(f\"Credit Limit Alert: Customer '{doc.customer}' is exceeding 70% of their credit limit in KES.<br>\"\n              f\"Limit: KES {credit_limit}<br>\"\n              f\"Projected Outstanding (KES): {projected_outstanding_kes:.2f}\"),\n            title=\"Credit Limit Warning\"\n        )\n        frappe.sendmail(\n            recipients=[\"judah@upande.com\"],\n            subject=f\"Credit Limit Alert for {doc.customer}\",\n            message=(f\"Customer '{doc.customer}' has exceeded 70% of their credit limit in KES.<br>\"\n                     f\"Limit: KES {credit_limit}<br>\"\n                     f\"Projected Outstanding (KES): {projected_outstanding_kes:.2f}\"),\n            reference_doctype=doc.doctype,\n            reference_name=doc.name\n        )\n\n        frappe.sendmail(\n            recipients=[\n                doc.contact_email or doc.email_id or \"judah@upande.com\"],\n            subject=f\"Notice: Credit Limit Usage for {doc.customer}\",\n            message=(\n                f\"<p>Dear {doc.customer},</p>\"\n                f\"<p>We would like to inform you that your credit utilization has reached <strong>over 70%</strong> of your approved credit limit with us.</p>\"\n                f\"<p><strong>Credit Limit:</strong> KES {credit_limit:,}<br>\"\n                f\"<strong>Projected Outstanding Balance:</strong> KES {projected_outstanding_kes:,.2f}</p>\"\n                f\"<p>We kindly request you to review your account and ensure timely settlement of outstanding invoices to maintain uninterrupted service.</p>\"\n                f\"<p>If you have any questions or need assistance, please do not hesitate to contact our accounts team.</p>\"\n                f\"<br><p>Thank you,<br>Your Company Accounts Team</p>\"\n            ),\n            reference_doctype=doc.doctype,\n            reference_name=doc.name,\n        )\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-06-02 14:14:13.052550",
  "module": "Upande Kikwetu",
  "name": "UpdateBucketStatus",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Stock Entry",
  "script": "entry_type = doc.stock_entry_type\n\nif entry_type == \"Harvesting\":\n    bucket_id = doc.custom_bucket_id \n    if bucket_id:\n        try:\n            bucket_doc = frappe.get_doc(\"Bucket QR Code\", bucket_id)\n            bucket_doc.custom_status = \"In Use\"\n            bucket_doc.last_stock_entry = doc.name\n            bucket_doc.save()\n        except frappe.DoesNotExistError:\n            frappe.log_error(f\"Bucket QR Code with ID {bucket_id} does not exist.\", \"Update Bucket Error\")\n\nif entry_type == \"Receiving\":\n    bucket_id = doc.custom_bucket_id \n    if bucket_id:\n        try:\n            bucket_doc = frappe.get_doc(\"Bucket QR Code\", bucket_id)\n            bucket_doc.custom_status = \"Available\"\n            bucket_doc.last_stock_entry = \"\"\n            bucket_doc.save()\n        except frappe.DoesNotExistError:\n            frappe.log_error(f\"Bucket QR Code with ID {bucket_id} does not exist.\", \"Update Bucket Error\")",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": "fetch_greenhouse_by_bucket_id",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-06-02 15:06:18.931940",
  "module": "Upande Kikwetu",
  "name": "FetchGreenhouseByBucketId",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": null,
  "script": "bucket_id = frappe.form_dict.get('bucket_id')\ntry:\n    if not bucket_id:\n        frappe.response['data'] = {\n            \"error\": \"Missing bucket_id\"}\n\n    stock_entries = frappe.get_all(\n        \"Stock Entry\",\n        filters={\n            \"custom_bucket_id\": bucket_id,\n            \"stock_entry_type\": \"Harvesting\"\n        },\n        fields=[\"name\"]\n    )\n\n    if not stock_entries:\n        frappe.response['data'] = {\n            \"message\": \"No Stock Entries found for this bucket.\"}\n\n    stock_entry_ids = [se.name for se in stock_entries]\n\n    warehouse_entries = frappe.get_all(\n        \"Stock Entry Detail\",\n        filters={\n            \"parent\": [\"in\", stock_entry_ids]\n        },\n        fields=[\"t_warehouse\"]\n    )\n\n    data = [{\"custom_greenhouse\": entry.t_warehouse}\n            for entry in warehouse_entries if entry.t_warehouse]\n\n    frappe.response['data'] = data\nexcept Exception as e:\n    frappe.log_error(f\"Error in fetch_greenhouse_by_bucket_id: {e}\")\n    frappe.response['data'] = None\n",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Submit",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-06-19 10:11:04.604089",
  "module": "Upande Kikwetu",
  "name": "RFQ Send CC Emails",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Request for Quotation",
  "script": "import frappe\nfrom frappe.utils.pdf import get_pdf\nfrom frappe.www.printview import get_print\nimport re\n\ntry:\n    # Load email template\n    try:\n        template = frappe.get_doc(\"Email Template\", \"Request For Quotation\")\n    except frappe.DoesNotExistError:\n        frappe.throw(\"Email Template 'Request For Quotation' not found.\")\n\n    subject = template.subject\n    message = template.response\n\n    # Split cc field by newlines\n    cc_emails = [email.strip() for email in (doc.cc or \"\").splitlines() if email.strip()]\n    \n    # Validate recipient\n    recipient = doc.email or \"\"\n    if not recipient:\n        frappe.throw(\"No recipient email found. Please set the 'email' field on the document.\")\n\n    # Generate PDF print\n    try:\n        pdf_content = get_pdf(get_print(\"Request for Quotation\", doc.name, print_format=doc.print_format or \"Standard\"))\n        pdf_filename = f\"RFQ-{doc.name}.pdf\"\n    except Exception as e:\n        frappe.throw(f\"Failed to generate PDF print: {e}\")\n\n    # Collect attachments\n    attachments = []\n\n    # Add the PDF as an attachment\n    attachments.append({\n        \"fname\": pdf_filename,\n        \"fcontent\": pdf_content\n    })\n\n    # Include existing attached files\n    file_list = frappe.get_all(\"File\", filters={\n        \"attached_to_doctype\": doc.doctype,\n        \"attached_to_name\": doc.name\n    }, fields=[\"name\", \"file_url\", \"file_name\"])\n\n    for f in file_list:\n        attachments.append({\"file_url\": f.file_url})\n\n    # Render email subject and message\n    rendered_subject = subject.format(**doc.as_dict())\n    rendered_message = frappe.render_template(message, doc.as_dict())\n\n    # Send email\n    frappe.sendmail(\n        recipients=recipient,\n        cc=cc_emails,\n        subject=rendered_subject,\n        message=rendered_message,\n        attachments=attachments,\n        reference_doctype=doc.doctype,\n        reference_name=doc.name,\n        send_email=True\n    )\n\n    # Notify user\n    frappe.msgprint(f\"Email sent to {recipient}\" + (f\" with CC to: {', '.join(cc_emails)}\" if cc_emails else \"\"))\n\nexcept Exception as e:\n    # Show a user-friendly error\n    frappe.throw(f\"An error occurred while sending the email: {frappe.utils.escape_html(str(e))}\")\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": "createOrUpdateFarmPackList",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-06-23 19:43:35.260999",
  "module": "Upande Kikwetu",
  "name": "createOrUpdateFarmPackList",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": null,
  "script": "try:\n    # Get incoming JSON payload\n    data = frappe.request.get_json()\n\n    # Extract values from JSON\n    sale_order_id = data.get(\"custom_sales_order\")\n    customer_id = data.get(\"custom_customer\")\n    user_farm = data.get(\"custom_farm\")\n    order_pick_list_id = data.get(\"custom_order_pick_list\")\n    items = data.get(\"items\")\n    frappe.log_error(f\"SALE ORDER ID: '{sale_order_id}'\", \"Invalid or Missing Sale Order ID\")\n\n    \n    if not sale_order_id:\n        frappe.throw(_(\"Sale Order ID is required\"))\n\n    if isinstance(items, str):\n        import json\n        items = json.loads(items)\n\n    if not items or not isinstance(items, list):\n        frappe.throw(_(\"Invalid or missing item list\"))\n\n    # Derive packlist ID\n    packlist_id = f\"M-{sale_order_id}\"\n    frappe.log_error(f\"Packlist ID: '{packlist_id}'\", \"Invalid or Missing ID\")\n\n    processed_items = []\n\n    for idx, entry in enumerate(items):\n        item_code = entry.get(\"item_code\")\n        bunch_uom = entry.get(\"bunch_uom\")\n        stem_length = entry.get(\"stem_length\")\n\n        # Debug log\n        frappe.msgprint(f\"Item {idx + 1}: {entry}\")\n\n        # Validation log\n        if not item_code:\n            frappe.msgprint(f\"Item {idx + 1} missing packing_variety\")\n        if not bunch_uom:\n            frappe.msgprint(f\"Item {idx + 1} missing packing_bunch_size\")\n        if not stem_length:\n            frappe.msgprint(f\"Item {idx + 1} missing packing_stem_length\")\n       \n\n        if not all([item_code, bunch_uom, stem_length]):\n            continue\n\n        # Parse number of stems from bunch size string like 'Bunch (10)'\n        try:\n            number_of_stems = int(bunch_uom.split(\"(\")[1].split(\")\")[0])\n        except:\n            frappe.throw(_(\"Invalid bunch size format\"))\n\n        # Prepare item for Farm Pack List\n        item_entry = {\n            \"doctype\": \"pack_list_item\",\n            \"item_code\": item_code,\n            \"bunch_uom\": bunch_uom,\n            \"bunch_qty\": 1,\n            \"source_warehouse\": \"Goods sold - KF\",\n            \"sales_order_id\": sale_order_id,\n            \"customer_id\": customer_id,\n            \"custom_number_of_stems\": number_of_stems,\n            \"stem_length\": stem_length\n        }\n        processed_items.append(item_entry)\n\n        # Create Stock Entry of type 'Packing'\n        stock_entry = frappe.get_doc({\n            \"doctype\": \"Stock Entry\",\n            \"stock_entry_type\": \"Packing\",\n            \"from_warehouse\": \"Goods sold - KF\",\n            \"to_warehouse\": \"Goods In Transit - KF\",\n            \"items\": [\n                {\n                    \"item_code\": item_code,\n                    \"qty\": 1,\n                    \"uom\": bunch_uom,\n                    \"stock_uom\": \"Stems\",\n                    \"conversion_factor\": number_of_stems,\n                    \"s_warehouse\": \"Goods sold - KF\",\n                    \"t_warehouse\": \"Goods In Transit - KF\",\n                }\n            ]\n        })\n        stock_entry.insert()\n        stock_entry.submit()\n\n    if not processed_items:\n        frappe.throw(_(\"No valid entries to process\"))\n\n    existing_doc = frappe.get_all(\"Farm Pack List\", filters={\"name\": packlist_id}, limit=1)\n\n    if existing_doc:\n        doc = frappe.get_doc(\"Farm Pack List\", packlist_id)\n        for item in processed_items:\n            doc.append(\"pack_list_item\", item)\n        doc.save()\n        frappe.db.commit()\n        frappe.response['data'] = {\n            \"status\": \"updated\",\n            \"message\": f\"Farm Pack List updated with {len(processed_items)} item(s) and Stock Entries created\",\n            \"docname\": doc.name\n        }\n    else:\n        doc = frappe.get_doc({\n            \"doctype\": \"Farm Pack List\",\n            \"custom_sales_order\": sale_order_id,\n            \"custom_customer\": customer_id,\n            \"custom_farm\": user_farm,\n            \"custom_order_pick_list\": order_pick_list_id,\n            \"pack_list_item\": processed_items,\n        })\n        doc.insert()\n        frappe.db.commit()\n        frappe.log_error(doc)\n        frappe.response['data'] = {\n            \"status\": \"created\",\n            \"message\": f\"Farm Pack List created with {len(processed_items)} item(s) and Stock Entries created\",\n            \"docname\": doc.name\n        }\n\nexcept Exception as e:\n    frappe.log_error(message=str(e), title=\"Farm Pack List Error\")\n    frappe.throw(_(\"Error processing farm pack list: \") + str(e))\n\n",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": "get_pick_list_with_farm_pack_list",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-05-12 19:24:18.740168",
  "module": "Upande Kikwetu",
  "name": "Get Pick List with Farm Packlist",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": null,
  "script": "pick_list_id = frappe.form_dict.get('pick_list_id')\n\ntry:\n    order_pick_list = frappe.get_doc('Order Pick List', pick_list_id).as_dict()\n    \n    farm_pack_list_names = frappe.db.get_all(\n        'Farm Pack List',\n        filters={'custom_order_pick_list': pick_list_id},\n        fields=['name']\n    )\n\n    farm_pack_list_with_items = []\n    for fp in farm_pack_list_names:\n        doc = frappe.get_doc('Farm Pack List', fp.name).as_dict()\n        farm_pack_list_with_items.append(doc)\n        \n    frappe.response['data'] = {\n        'order_pick_list': order_pick_list,\n        'farm_pack_lists': farm_pack_list_with_items\n    }\n\nexcept Exception as e:\n    frappe.log_error(f\"Error in get_pick_list_with_farm_packs: {e}\")\n    frappe.response['data'] = None\n",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-05-15 21:16:03.165302",
  "module": null,
  "name": "Completeness tracker CPL",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Consolidated Pack List",
  "script": "so_total = float(doc.get('custom_total_stems') or 0)\ncpl_total = float(doc.get('custom_total_number_of_stems_on_cpl') or 0)\n\nif so_total != 0:\n    completion_percentage = (cpl_total / so_total) * 100\nelse:\n    completion_percentage = 0\n\ndoc.db_set('completion_percentage', completion_percentage)\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": "get_item_group_price",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-04-15 11:27:29.863807",
  "module": "Upande Kikwetu",
  "name": "Amount Calc Based on IGP",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": null,
  "script": "\nitem_group = frappe.form_dict.get(\"item_group\")\nlength = frappe.form_dict.get(\"length\")\ncurrency = frappe.form_dict.get(\"currency\")\n\nif not item_group or not length or not currency:\n    frappe.response[\"message\"] = \"Missing required parameters\"\nelse:\n    price_doc = frappe.db.get_value(\n        \"Item Group Price\",\n        {\"item_group\": item_group, \"length\": length, \"currency\": currency},\n        \"price_list_rate\"\n    )\n\n    frappe.response[\"message\"] = price_doc if price_doc else None\n",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-03-11 10:54:18.828871",
  "module": "Upande Kikwetu",
  "name": "Stock Entry Script",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Stock Entry",
  "script": "if (doc.stock_entry_type == \"Harvesting\") or (doc.stock_entry_type == \"Receiving\") or (doc.stock_entry_type == \"Grading\"):\n    doc.submit()\n    ",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-02-14 01:15:16.702691",
  "module": "Upande Kikwetu",
  "name": "Stock Entry After Save",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Stock Entry",
  "script": "if doc.stock_entry_type == \"Grading\":\n    name = doc.name\n    \n    if frappe.db.exists(\"QR Code\", name):\n        frappe.delete_doc(\"QR Code\", name)\n    \n    if doc.custom_bunch_qr_code:\n        qr_code_doc = frappe.get_doc({\n            \"doctype\": \"QR Code\",  \n            \"stock_entry\": doc.name,\n            \"qr_code_image\": doc.custom_bunch_qr_code,  \n        })\n        qr_code_doc.insert()\n        \n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-03-24 12:22:22.737541",
  "module": "Upande Kikwetu",
  "name": "Harvest Stock Entry",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Harvest",
  "script": "stock_entry = frappe.new_doc(\"Stock Entry\")\n\nstock_entry.stock_entry_type = \"Harvesting\"\nstock_entry.custom_farm = doc.farm\nstock_entry.custom_greenhouse = doc.block or doc.blck or doc.bck\nstock_entry.custom_block__bed_number = doc.bay\nstock_entry.custom_harvester = doc.harvester\nstock_entry.custom_bucket_id = doc.bucket_id\nstock_entry.to_warehouse = doc.block or doc.blck or doc.bck\n\nstock_entry.append(\"items\", {\n    \n    \"item_code\": doc.item_code,\n    \"qty\": doc.quantity\n})\n\nstock_entry.insert()\nstock_entry.submit()\n\nfrappe.msgprint(f\"Stock Entry {stock_entry.name} created successfully.\")",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Submit",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-03-26 16:23:28.541728",
  "module": "Upande Kikwetu",
  "name": "Automate Rejects Material Issue",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Stock Entry",
  "script": "if (doc.stock_entry_type == \"Field Rejects\"):\n    farm = doc.custom_farm\n    items = []\n    for item in doc.items:\n        item_dict = {\n            \"item_code\": item.item_code,\n            \"qty\": item.qty,\n            \"s_warehouse\": None,\n            \"t_warehouse\": item.t_warehouse,\n            \"custom_rejection_reason\": item.custom_rejection_reason,\n            \"custom_bay\": item.custom_bay\n        }\n        \n        items.append(item_dict)\n        \n    \n    if items:\n        material_issue = frappe.get_doc({\n            \"doctype\": \"Stock Entry\",\n            \"stock_entry_type\": \"Material Issue\",\n            \"custom_farm\": farm,\n            \"items\": []\n        })\n\n        for item in items:\n            material_issue.append(\"items\", {\n                \"item_code\": item[\"item_code\"],\n                \"qty\": item[\"qty\"],\n                \"s_warehouse\": item[\"t_warehouse\"],\n                \"t_warehouse\": None,\n                \"custom_rejection_reason\": item[\"custom_rejection_reason\"],\n                \"custom_bay\": item[\"custom_bay\"]\n            })\n\n        material_issue.insert()\n        \n        material_issue.set_posting_time = 1 \n        material_issue.posting_date = doc.posting_date\n        material_issue.posting_time = doc.posting_time\n        \n        material_issue.submit()\n        \n        frappe.msgprint(f\"Material Issue Stock Entry {material_issue.name} created successfully.\")\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Submit",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-06-26 11:35:18.613120",
  "module": "Upande Kikwetu",
  "name": "Create Box Labels",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Farm Pack List",
  "script": "if doc.docstatus == 1:\n    try:\n        pack_list_items = doc.pack_list_item\n        sales_order_id = doc.custom_sales_order\n\n        if not pack_list_items:\n            frappe.throw(\"No items found in the pack list.\")\n\n        farm_warehouse = \"\" if not pack_list_items[0].source_warehouse else pack_list_items[0].source_warehouse\n        farm = farm_warehouse.split()[0] if farm_warehouse else \"Unknown\"\n\n        opl = frappe.db.get_all(\n            \"Order Pick List\",\n            filters={\"sales_order\": sales_order_id},\n            fields=[\"name\"],\n            limit=1\n        )\n        if not opl:\n            frappe.throw(f\"No Order Pick List found for Sales Order {sales_order_id}\")\n\n        opl_name = opl[0].name\n        sales_order_doc = frappe.get_doc(\"Sales Order\", sales_order_id)\n\n        box_groups = {}\n        total_stems_per_box = {}\n\n        for row in pack_list_items:\n            box_id = row.box_id if row.box_id and row.box_id.isdigit() else \"1\"\n            box_id = int(box_id)\n\n            if box_id not in box_groups:\n                box_groups[box_id] = []\n                total_stems_per_box[box_id] = 0\n\n            box_groups[box_id].append({\n                \"item_code\": row.item_code,\n                \"bunch_uom\": row.bunch_uom,\n                \"bunch_qty\": row.bunch_qty\n            })\n\n            stems = row.custom_number_of_stems if row.custom_number_of_stems else 0\n            total_stems_per_box[box_id] = total_stems_per_box[box_id] + stems\n\n        for box_number in sorted(box_groups.keys()):\n            box_items = box_groups[box_number]\n            total_stems = total_stems_per_box[box_number]\n\n            if not box_items:\n                frappe.log_error(f\"No items for box {box_number} in Farm Pack List {doc.name}\")\n                continue\n\n            try:\n                new_label = frappe.new_doc(\"Box Label\")\n                new_label.customer = doc.custom_customer\n                new_label.box_number = box_number\n                new_label.order_pick_list = opl_name\n                new_label.pack_rate = total_stems\n                new_label.date = frappe.utils.nowdate()\n                new_label.customer_purchase_order = sales_order_doc.po_no\n                new_label.consignee = sales_order_doc.custom_consignee\n                new_label.truck_details = sales_order_doc.custom_truck_details\n                new_label.farm_pack_list_link = doc.name\n\n                for fpl_item in box_items:\n                    new_label.append(\"box_item\", {\n                        \"variety\": fpl_item[\"item_code\"],\n                        \"uom\": fpl_item[\"bunch_uom\"],\n                        \"qty\": fpl_item[\"bunch_qty\"]\n                    })\n\n                new_label.insert()\n                frappe.log_error(f\"Created Box Label for box {box_number} in Farm Pack List {doc.name}\")\n\n\n            except Exception as e:\n                frappe.log_error(f\"Failed to create Box Label for box {box_number} in Farm Pack List {doc.name}: {str(e)}\")\n\n    except Exception as e:\n        frappe.log_error(f\"Auto Box Label Creation Failed for Farm Pack List {doc.name}: {str(e)}\")",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": "create_cpl",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Submit",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-05-16 13:43:48.090846",
  "module": null,
  "name": "Create cpl",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Farm Pack List",
  "script": "\nif not doc.pack_list_item:\n    frappe.throw(\"No items in Farm Pack List to transfer.\")\n\ntarget_warehouse = \"Goods In Transit - KF\"\n\nif not frappe.db.exists(\"Warehouse\", target_warehouse):\n    frappe.throw(f\"Target Warehouse '{target_warehouse}' does not exist.\")\n\nstock_entry = frappe.new_doc(\"Stock Entry\")\nstock_entry.stock_entry_type = \"Material Transfer\"\nstock_entry.farm_pack_list = doc.name\n\nfor item in doc.pack_list_item:\n    if not item.source_warehouse:\n        frappe.throw(f\"Source Warehouse is missing for item {item.item_code}\")\n    \n    if not frappe.db.exists(\"Warehouse\", item.source_warehouse):\n        frappe.throw(f\"Source Warehouse '{item.source_warehouse}' does not exist.\")\n    \n    stock_entry.append(\"items\", {\n        \"s_warehouse\": item.source_warehouse,\n        \"t_warehouse\": target_warehouse,\n        \"item_code\": item.item_code,\n        \"qty\": item.bunch_qty,\n        \"uom\": item.bunch_uom,\n        \"stock_uom\": item.bunch_uom,\n    })\n\nstock_entry.save(ignore_permissions=True)\nstock_entry.submit()\n\nsales_order_id = doc.custom_sales_order\n\nif not sales_order_id:\n    frappe.throw(\"Sales Order ID is required for CPL.\")\n\nexisting_cpl = frappe.get_all(\"Consolidated Pack List\",\n    filters={\"sales_order_id\": sales_order_id},\n    fields=[\"name\"], limit=1)\n\nbox_labels = frappe.get_all(\"Sales Order Item\",\n    filters={\"parent\": sales_order_id},\n    fields=[\"item_code\", \"custom_box_label\"])\n\nbox_label_map = {b.item_code: b.custom_box_label for b in box_labels if b.custom_box_label}\n\nif existing_cpl:\n    cpl = frappe.get_doc(\"Consolidated Pack List\", existing_cpl[0].name)\nelse:\n    cpl = frappe.new_doc(\"Consolidated Pack List\")\n    cpl.sales_order_id = sales_order_id\n    cpl.customer_id = doc.pack_list_item[0].customer_id if doc.pack_list_item else None\n\ncpl.custom_sales_order = doc.custom_sales_order\ncpl.custom_customer = doc.custom_customer\ncpl.custom_currency = doc.custom_currency\ncpl.custom_customer_address = doc.custom_customer_address\n\ntotal_stems = 0\nif cpl.get(\"items\"):\n    for i in cpl.items:\n        total_stems = total_stems + (i.custom_number_of_stems or 0)\n\nfor item in doc.pack_list_item:\n    box_label = box_label_map.get(item.item_code, item.custom_box_label)\n    cpl.append(\"items\", {\n        \"source_warehouse\": \"Goods In Transit - KF\",\n        \"customer_id\": item.customer_id,\n        \"sales_order_id\": doc.custom_sales_order,\n        \"box_id\": item.box_id,\n        \"item_code\": item.item_code,\n        \"bunch_uom\": item.bunch_uom,\n        \"bunch_qty\": item.bunch_qty,\n        \"stem_length\": item.stem_length,\n        \"consolidated_pack_list_id\": item.consolidated_pack_list_id,\n        \"custom_number_of_stems\": item.custom_number_of_stems,\n        \"custom_box_label\": box_label\n    })\n    total_stems = total_stems + (item.custom_number_of_stems or 0)\n\ncpl.custom_total_stems = total_stems\ncpl.save(ignore_permissions=True)\ndoc.save()",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-06-03 11:10:57.347870",
  "module": "Upande Kikwetu",
  "name": "Delivery Note Script",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Material Request",
  "script": "if doc.material_request_type == \"Material Transfer\" and doc.workflow_state == \"Approved by Security Guard\":\n    # Create new Internal Delivery Note\n    idn = frappe.new_doc(\"Internal Delivery Note\")\n    idn.naming_series = \"IDN-.YYYY.-\"\n    idn.from_warehouse = doc.set_from_warehouse  # assuming 'set_warehouse' is your Source Warehouse\n    idn.to_warehouse = doc.set_warehouse     # assuming you have a custom 'to_warehouse' field\n    \n    # Copy Items\n    for item in doc.items:\n        idn.append(\"items\", {\n            \"item_code\": item.item_code,\n            \"item_name\": item.item_name,\n            \"qty\": item.qty,\n            \"uom\": item.uom,\n            \"description\": item.description\n        })\n    \n    # Save and Submit the new Internal Delivery Note\n    idn.insert(ignore_permissions=True)\n    idn.submit()\n    \n    frappe.msgprint(f\"Internal Delivery Note {idn.name} created successfully.\")\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-04-25 17:30:23.844177",
  "module": "Upande Kikwetu",
  "name": "Material Transfer Submit",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Material Request",
  "script": "if doc.material_request_type in [\"Material Issue\"]:\n    if doc.workflow_state in [\"Approved by Farm Manager\", \"Approved by Crop Protection Manager\", \"Approved by Production Manager\"]:\n        # doc.save()\n        doc.submit()",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Submit",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-04-26 11:59:08.173498",
  "module": "Upande Tambuzi",
  "name": "CPL complete percentage tracker",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Consolidated Pack List",
  "script": "def validate(doc, method):\n    if doc.get('sales_order'):\n        try:\n            # Calculate total packed quantity per item_code from Consolidated Pack List\n            packed_quantities = frappe.db.sql(\"\"\"\n                SELECT item.item_code, COALESCE(SUM(item.custom_number_of_stems), 0) as total_qty\n                FROM `tabConsolidated Pack List` cpl\n                INNER JOIN `tabPack List Item` item ON cpl.name = item.parent\n                WHERE cpl.sales_order = %s\n                AND cpl.docstatus < 2\n                GROUP BY item.item_code\n            \"\"\", doc.sales_order, as_dict=1)\n\n            # Calculate total ordered quantity per item_code from Sales Order\n            ordered_quantities = frappe.db.sql(\"\"\"\n                SELECT so_item.item_code, COALESCE(SUM(so_item.qty), 0) as total_qty\n                FROM `tabSales Order Item` so_item\n                INNER JOIN `tabSales Order` so ON so_item.parent = so.name\n                WHERE so.name = %s\n                AND so.docstatus = 1\n                GROUP BY so_item.item_code\n            \"\"\", doc.sales_order, as_dict=1)\n\n            # Match item codes and calculate totals\n            total_packed = 0\n            total_ordered = 0\n            for ordered in ordered_quantities:\n                item_code = ordered.item_code\n                ordered_qty = ordered.total_qty\n                packed_qty = next((p.total_qty for p in packed_quantities if p.item_code == item_code), 0)\n                total_ordered += ordered_qty\n                total_packed += min(packed_qty, ordered_qty)  # Cap packed qty at ordered qty\n\n            frappe.msgprint(_(\"Total Packed Quantity: {}\").format(total_packed))\n            frappe.msgprint(_(\"Total Ordered Quantity: {}\").format(total_ordered))\n\n            # Handle invalid Sales Order data\n            if total_ordered <= 0:\n                frappe.throw(_(\"Sales Order has no valid ordered items. Cannot process Consolidated Pack List.\"))\n            elif total_packed > total_ordered:\n                frappe.throw(_(\"Cannot pack {} units. Sales Order only requires {} units.\").format(total_packed, total_ordered))\n\n            # Calculate completion percentage\n            completion_percentage = 0\n            if total_ordered > 0:\n                completion_percentage = (total_packed / total_ordered) * 100\n                completion_percentage = round(completion_percentage, 2)\n\n            frappe.msgprint(_(\"Calculated completion percentage: {}%\").format(completion_percentage))\n\n            # Update Sales Order\n            final_value = min(completion_percentage, 100)\n            frappe.msgprint(_(\"Attempting to set custom_completion_percentage to: {}%\").format(final_value))\n\n            frappe.db.set_value(\n                \"Sales Order\",\n                doc.sales_order,\n                \"custom_completion_percentage\",\n                final_value\n            )\n\n            # Verify the update\n            updated_value = frappe.db.get_value(\"Sales Order\", doc.sales_order, \"custom_completion_percentage\")\n            frappe.msgprint(_(\"Value after update: {}%\").format(updated_value))\n\n            # Block over-fulfillment\n            if completion_percentage >= 100:\n                frappe.throw(_(\"Packing cannot proceed. 100% of Sales Order has been fulfilled.\"))\n\n        except Exception as e:\n            frappe.msgprint(_(\"Error details: {}\").format(str(e)))\n            frappe.throw(_(\"Sales Order update failed: {}\").format(str(e)))",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-05-15 20:22:30.449416",
  "module": null,
  "name": "Packed% on FPL",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Farm Pack List",
  "script": "opl_total = float(doc.get('opl_total_stems') or 0)\ncustom_total = float(doc.get('custom_total_stems') or 0)\n\nif opl_total != 0:\n    packed = (custom_total / opl_total) * 100\nelse:\n    packed = 0\n\ndoc.db_set('packed', packed)\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": "loadTruck",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-06-29 20:57:21.227426",
  "module": "Upande Kikwetu",
  "name": "loadTruck",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": null,
  "script": "try:\n    # Get incoming JSON payload\n    data = frappe.request.get_json()\n    if not data:\n        frappe.throw(_(\"No data received\"))\n\n    # Extract fields\n    customer_id = data.get(\"customer_id\")\n    box_number = data.get(\"box_number\")\n    sale_order_id = data.get(\"sale_order_id\")\n    order_pick_list_id = data.get(\"order_pick_list_id\")\n    farm_pack_list_id = data.get(\"farm_pack_list_id\")\n    date = data.get(\"date\")\n    manifest_entry_name = data.get(\"manifest_entry_name\")\n    \n    if not manifest_entry_name:\n        frappe.throw(_(\"Missing parent document reference\"))\n\n    # Load the parent doc\n    doc = frappe.get_doc(\"Truck Loading Manifest\", manifest_entry_name)\n\n    # Append a row to child table\n    doc.append(\"box_details\", {\n        \"box_number\": box_number,\n        \"order_picklist\": order_pick_list_id,\n        \"customer\": customer_id,\n        \"sale_order_number\": sale_order_id,\n        \"date\": date,\n        \"farm_packlist\": farm_pack_list_id\n    })\n\n    doc.save()\n    frappe.db.commit()\n\n    frappe.response[\"message\"] = {\n        \"status\": \"success\",\n        \"message\": \"Box detail added\"\n    }\n\n\nexcept Exception as e:\n    frappe.log_error(message=e, title=\"Truck Loading Manifest Error\")\n    frappe.throw(_(\"Error processing manifest: \") + str(e))",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-07-22 11:24:17.990705",
  "module": null,
  "name": "Farm Code on Sales Order",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Sales Order",
  "script": "code = set()\nfor row in doc.items:\n    if row.custom_source_warehouse:\n        farm = frappe.db.get_value(\"Warehouse\", row.custom_source_warehouse, \"custom_farm\")\n        if farm:\n            farm_code = frappe.db.get_value(\"Farm\", farm, \"farm_code\")\n            if farm_code:\n                code.add(farm_code)\nif code:\n    doc.db_set(\"custom_farm_code\", \"\\n\".join(sorted(code)))\n",
  "script_type": "DocType Event"
 }
]